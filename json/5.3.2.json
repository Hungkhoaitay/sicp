[{"id":"/sicpjs/5.3.2","tag":"TITLE","body":"5.3.2  \n    Maintaining the Illusion of Infinite Memory"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    The representation method outlined in\n    section ","tag":"#text"},{"tag":"REF","body":"5.3.1","href":"/sicpjs/5.3.1"},{"body":" solves the problem of\n    implementing list structure, provided that we have an infinite amount of\n    memory. With a real computer we will eventually run out of free space in\n    which to construct new pairs.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/5.3.2#footnote-1"},{"body":" However, most of the pairs\n    generated in a typical computation are used only to hold intermediate\n    results.  After these\n    results are accessed, the pairs are no longer needed—they are ","tag":"#text"},{"tag":"EM","child":[{"body":"\n    garbage","tag":"#text"}]},{"body":".  For instance, the computation\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":false,"body":"accumulate((x, y) => x + y,\n           0,\n           filter(is_odd, enumerate_interval(0, n)))"},{"body":"\n    constructs two lists: the enumeration and the result of filtering\n    the enumeration.  When the accumulation is complete, these lists are\n    no longer needed, and the allocated memory can be reclaimed.  If we\n    can arrange to collect all the garbage periodically, and if this turns\n    out to recycle memory at about the same rate at which we construct new\n    pairs, we will have preserved the illusion that there is an infinite\n    amount of memory.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    In order to recycle pairs, we must have a way to determine which\n    allocated pairs are not needed (in the sense that their contents can\n    no longer influence the future of the computation).  The method we\n    shall examine for accomplishing this is known as ","tag":"#text"},{"tag":"EM","child":[{"body":"garbage\n    collection","tag":"#text"}]},{"body":".  Garbage collection is based on the observation that, at\n    any moment in a\n    JavaScript\n    interpretation, the only objects that can\n    affect the future of the computation are those that can be reached by\n    some succession of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    operations starting from the pointers that are currently in the machine\n    registers.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/5.3.2#footnote-2"},{"body":"  Any memory cell that is not so accessible may be\n    recycled.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    There are many ways to perform garbage collection.  The method we\n    shall examine here is called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"stop-and-copy","tag":"#text"}]},{"body":".  The basic idea is to divide memory into two\n    halves: \"working memory\" and \"free memory.\"  When\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    constructs pairs, it allocates these in working memory.  When working memory\n    is full, we perform garbage collection by locating all the useful pairs in\n    working memory and copying these into consecutive locations in free memory.\n    (The useful pairs are located by tracing all the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n     and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointers, starting with the machine registers.)  Since we do not copy the\n    garbage, there will presumably be additional free memory that we can\n    use to allocate new pairs.  In addition, nothing in the working memory\n    is needed, since all the useful pairs in it have been copied.  Thus,\n    if we interchange the roles of working memory and free memory, we can\n    continue processing; new pairs will be allocated in the new working\n    memory (which was the old free memory).  When this is full, we can\n    copy the useful pairs into the new free memory (which was the old\n    working memory).","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/5.3.2#footnote-3"},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Implementation of a stop-and-copy garbage collector","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    We now use our register-machine language to describe the stop-and-copy\n    algorithm in more detail.  We will assume that there is a register\n    called \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" that contains a pointer to a structure\n    that eventually points at all accessible data.  This can be arranged by\n    storing the contents of all the machine registers in a preallocated list\n    pointed at by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" just before starting\n    garbage collection.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/5.3.2#footnote-4"},{"body":"\n    We also assume that, in addition to the current working memory, there is\n    free memory available into which we can copy the useful data.  The current\n    working memory consists of vectors whose base addresses are in \n    registers called\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_heads"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_tails"},{"body":",\n    and the free memory is in registers called \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new_heads"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new_tails"},{"body":".","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n    Garbage collection is triggered when we exhaust the free cells in the\n    current working memory, that is, when a\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    operation attempts to increment the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":"\n    pointer beyond the end of the memory vector.  When the garbage-collection\n    process is complete, the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" pointer will\n    point into the new memory, all objects accessible from the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" will have been moved to the new memory,\n    and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" pointer will indicate the next\n    place in the new memory where a new pair can be allocated.  In addition,\n    the roles of working memory and new memory will have been\n    interchanged—new pairs will be constructed in the new memory,\n    beginning at the place indicated by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":", and\n    the (previous) working memory will be available as the new memory for the\n    next garbage collection.\n    Figure ","tag":"#text"},{"tag":"REF","body":"5.15","href":"/sicpjs/5.3.2#fig-5.15"},{"body":"\n    shows the arrangement of memory just before and just after garbage\n    collection.\n    ","tag":"#text"},{"tag":"FIGURE","scale":"90%","src":"img_javascript/Fig5.15c.std.svg","id":"#fig-5.15","captionHref":"/sicpjs/5.3.2#fig-5.15","captionName":"Figure 5.15 ","captionBody":[{"body":"\n\t    Reconfiguration of memory by the garbage-collection process.\n\t  ","tag":"#text"}]}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    The state of the garbage-collection process is controlled by\n    maintaining two pointers:\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":".  These are initialized to point to the\n    beginning of the new memory.  The algorithm begins by relocating the pair\n    pointed at by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" to the beginning of the new\n    memory.  The pair is copied, the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" pointer\n    is adjusted to point to the new location, and the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" pointer is incremented.  In addition, the\n    old location of the pair is marked to show that its contents have been\n    moved.  This marking is done as follows: In the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    position, we place a special tag that signals that this is an already-moved\n    object.  (Such an object is traditionally called a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"broken heart","tag":"#text"}]},{"body":".)","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/5.3.2#footnote-5"},{"body":"\n    In the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    position we place a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"forwarding address","tag":"#text"}]},{"body":" that points at the location to which the object\n    has been moved.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    After relocating the root, the garbage collector enters its basic\n    cycle.  At each step in the algorithm, the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":" pointer\n    (initially pointing at the relocated root) points at a pair that has\n    been moved to the new memory but whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    pointers still refer to objects in the old memory.  These objects are each\n    relocated, and the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":" pointer is incremented.\n    To relocate an object (for example, the object indicated by the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer of the pair we are scanning) we check to see if the object has\n    already been moved (as indicated by the presence of a broken-heart tag\n    in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    position of the object).  If the object has not\n    already been moved, we copy it to the place indicated by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":",\n    update ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":", set up a broken heart at the\n    object's old location, and update the pointer to the object (in this\n    example, the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer of the pair we are scanning) to point\n    to the new location.  If the object has already been moved, its\n    forwarding address (found in the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    position of the broken heart) is substituted for the pointer in the pair\n    being scanned. Eventually, all accessible objects will have been moved and\n    scanned, at which point the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":" pointer will\n    overtake the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" pointer and the process will\n    terminate.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    We can specify the stop-and-copy algorithm as a sequence of instructions for\n    a register machine.  The basic step of relocating an object is accomplished\n    by a subroutine called\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"relocate_old_result_in_new"},{"body":".\n      \n    This subroutine gets its argument, a pointer to the object to be relocated,\n    from a register named \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"old"},{"body":".  It relocates the designated object\n    (incrementing ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" in the process),\n    puts a pointer to the relocated object into a register called \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new"},{"body":", and returns by branching to the entry\n    point stored in the register\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"relocate_continue"},{"body":".\n      \n    To begin garbage collection, we invoke this subroutine to relocate the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" pointer, after initializing\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" and ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":".\n    When the relocation of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" has been\n    accomplished, we install the new pointer as the new\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":" and enter the main loop of the garbage\n    collector.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":false,"body":"\"begin_garbage_collection\",\n  assign(\"free\", constant(0)),\n  assign(\"scan\", constant(0)),\n  assign(\"old\", reg(\"root\")),\n  assign(\"relocate_continue\", label(\"reassign_root\")),\n  go_to(label(\"relocate_old_result_in_new\")),\n\"reassign_root\",\n  assign(\"root\", reg(\"new\")),\n  go_to(label(\"gc_loop\")),"}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    In the main loop of the garbage collector we must determine whether\n    there are any more objects to be scanned.  We do this by testing\n    whether the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"scan"},{"body":" pointer is coincident with\n    the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":" pointer.  If the pointers are equal,\n    then all accessible objects have been relocated, and we branch to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"gc_flip"},{"body":",\n    which cleans things up so that we can continue the interrupted computation.\n    If there are still pairs to be scanned, we call the relocate subroutine to\n    relocate the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    of the next pair (by placing the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"old"},{"body":").  The\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"relocate_continue"},{"body":"\n    register is set up so that the subroutine will return to update the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":false,"body":"\"gc_loop\",\n  test(list(op(\"===\"), reg(\"scan\"), reg(\"free\"))),\n  branch(label(\"gc_flip\")),\n  assign(\"old\", list(op(\"vector_ref\"), reg(\"new_heads\"), reg(\"scan\"))),\n  assign(\"relocate_continue\", label(\"update_head\")),\n  go_to(label(\"relocate_old_result_in_new\")),"}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    At\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"update_head"},{"body":",\n    we modify the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer of the pair being scanned, then proceed to relocate the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the pair.  We return to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"update_tail"},{"body":"\n    when that relocation has been accomplished. After relocating and updating\n    the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":",\n    we are finished scanning that pair, so we continue with the main loop.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"\"update_head\",\n  perform(list(op(\"vector_set\"), \n               reg(\"new_heads\"), reg(\"scan\"), reg(\"new\"))),\n  assign(\"old\", list(op(\"vector_ref\"), \n                     reg(\"new_tails\"), reg(\"scan\"))),\n  assign(\"relocate_continue\", label(\"update_tail\")),\n  go_to(label(\"relocate_old_result_in_new\")),\n\n\"update_tail\",\n  perform(list(op(\"vector_set\"), \n               reg(\"new_tails\"), reg(\"scan\"), reg(\"new\"))),\n  assign(\"scan\", list(op(\"+\"), reg(\"scan\"), constant(1))),\n  go_to(label(\"gc_loop\")),"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    The subroutine\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"relocate_old_result_in_new"},{"body":"\n    relocates objects as follows: If the object to be relocated (pointed at by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"old"},{"body":") is not a pair, then we return the same\n    pointer to the object unchanged (in ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new"},{"body":").\n    (For example, we may be scanning a pair whose\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    is the number 4.  If we represent the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"n4"},{"body":", as described in\n    section ","tag":"#text"},{"tag":"REF","body":"5.3.1","href":"/sicpjs/5.3.1"},{"body":", then we want the\n    \"relocated\"","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    pointer to still be ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"n4"},{"body":".)  Otherwise, we\n    must perform the relocation.  If the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    position of the pair to be relocated contains a broken-heart tag, then the\n    pair has in fact already been moved, so we retrieve the forwarding address\n    (from the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    position of the broken heart) and return this in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new"},{"body":". If the pointer in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"old"},{"body":" points at a yet-unmoved pair, then we move\n    the pair to the first free cell in new memory (pointed at by\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"free"},{"body":") and set up the broken heart by storing a\n    broken-heart tag and forwarding address at the old location.\n    The subroutine\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"relocate_old_result_in_new"},{"body":"\n    uses a register \n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"oldht"},{"body":"\n    to hold the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"head"},{"body":"\n    or the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"tail"},{"body":"\n    of the object pointed at by ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"old"},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-6","body":"6","href":"/sicpjs/5.3.2#footnote-6"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\n\"relocate_old_result_in_new\",\n  test(list(op(\"is_pointer_to_pair\"), reg(\"old\"))),\n  branch(label(\"pair\")),\n  assign(\"new\", reg(\"old\")),\n  go_to(reg(\"relocate_continue\")),\n\"pair\",\n  assign(\"oldht\", list(op(\"vector_ref\"), \n                       reg(\"the_heads\"), reg(\"old\"))),\n  test(list(op(\"is_broken_heart\"), reg(\"oldht\"))),\n  branch(label(\"already_moved\")),\n  assign(\"new\", reg(\"free\")),     // new location for pair\n  // Update $\\texttt{free}$ pointer\n  assign(\"free\", list((op(\"+\"), reg(\"free\"), constant(1))),\n  // Copy the head and tail to new memory\n  perform(list(op(\"vector_set\"),\n               reg(\"new_heads\"), reg(\"new\"),\n               reg(\"oldht\"))),\n  assign(\"oldht\", list(op(\"vector_ref\"), \n                       reg(\"the_tails\"), reg(\"old\"))),\n  perform(list(op(\"vector_set\"),\n               reg(\"new_tails\"), reg(\"new\"),\n               reg(\"oldht\"))),\n  // Construct the broken heart\n  perform(list(op(\"vector_set\"),\n               reg(\"the_heads\"), reg(\"old\"),\n               constant(\"broken_heart\"))),\n  perform(list(op(\"vector_set\"),\n               reg(\"the_tails\"), reg(\"old\"),\n               reg(\"new\"))),\n  go_to(reg(\"relocate_continue\")),\n\"already_moved\",\n  assign(\"new\", list(op(\"vector_ref\"), \n                     reg(\"the_tails\"), reg(\"old\"))),\n  go_to(reg(\"relocate_continue\")),\n      "}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    At the very end of the garbage collection process, we interchange the\n    role of old and new memories by interchanging pointers: interchanging\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_heads"},{"body":"\n    with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new_heads"},{"body":",\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_tails"},{"body":"\n    with\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"new_tails"},{"body":".\n    We will then be ready to perform another garbage\n    collection the next time memory runs out.\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":77,"program":"chap=4&prgrm=","body":"\"gc_flip\",\n  assign(\"temp\", reg(\"the_tails\")),\n  assign(\"the_tails\", reg(\"new_tails\")),\n  assign(\"new_tails\", reg(\"temp\")),\n  assign(\"temp\", reg(\"the_heads\")),\n  assign(\"the_heads\", reg(\"new_heads\")),\n  assign(\"new_heads\", reg(\"temp\")) "}]}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/5.3.2#footnote-link-1","child":[{"body":"This may not be true eventually,\n    because memories may get large enough so that it would be impossible\n    to run out of free memory in the lifetime of the computer.  For\n    example, there are about\n    ","tag":"#text"},{"body":"$3\\times 10^{16}$ nanoseconds","tag":"LATEX"},{"body":"\n    in a year, so if we were to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"pair"},{"body":"\n    once per\n    ","tag":"#text"},{"body":"nanosecond","tag":"LATEX"},{"body":"\n    we would need about\n    ","tag":"#text"},{"body":"$10^{18}$","tag":"LATEX"},{"body":"\n    cells of memory to build a machine\n    that could operate for 30 years without running out of memory.  That much\n    memory seems absurdly large by today's standards, but it is not\n    physically impossible.  On the other hand, processors are getting faster and \n    \n        modern computers have increasingly\n      \n    large numbers of processors operating in\n    parallel on a single memory, so it may be possible to use up memory much\n    faster than we have postulated.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/5.3.2#footnote-link-2","child":[{"body":"We assume here that the stack is represented as a list\n    as described in section ","tag":"#text"},{"tag":"REF","body":"5.3.1","href":"/sicpjs/5.3.1"},{"body":", so that\n    items on the stack are accessible via the pointer in the stack\n    register.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/5.3.2#footnote-link-3","child":[{"body":"This idea was invented and first implemented\n    by\n    \n    Minsky, as part of the implementation of \n    \n    Lisp for the PDP-1 at the\n    \n    MIT Research Laboratory of Electronics.  It was further developed by\n    \n    Fenichel and Yochelson (1969) for use in the Lisp implementation for the\n    \n    Multics time-sharing system.  Later, \n    \n    Baker (1978) developed a \"real-time\" version of the method,\n    which does not require the computation to stop during garbage collection.\n    Baker's idea was extended by \n    \n    Hewitt,\n    \n    Lieberman, and\n    \n    Moon (see Lieberman and Hewitt 1983) to take\n    advantage of the fact that some structure is more volatile\n    and other structure is more permanent.  \n    \n    An alternative commonly used garbage-collection technique is the \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"mark-sweep","tag":"#text"}]},{"body":" method. This consists of tracing all the structure\n    accessible from the machine registers and marking each pair we reach.\n    We then scan all of memory, and any location that is unmarked is\n    \"swept up\" as garbage and made available for reuse.  A full\n    discussion of the mark-sweep method can be found in \n    Allen 1978.\n    \n    The Minsky-Fenichel-Yochelson algorithm is the dominant algorithm in\n    use for large-memory systems because it examines only the useful part\n    of memory.  This is in contrast to mark-sweep, in which the sweep\n    phase must check all of memory.  A second advantage of stop-and-copy\n    is that it is a \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"compacting","tag":"#text"}]},{"body":" garbage collector.  That is, at the\n    end of the garbage-collection phase the useful data will have been\n    moved to consecutive memory locations, with all garbage pairs\n    compressed out.  This can be an extremely important performance\n    consideration in machines with virtual memory, in which accesses to\n    widely separated memory addresses may require extra paging\n    operations.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/5.3.2#footnote-link-4","child":[{"body":"This list of\n    registers does not\n    include\n    the registers used by the storage-allocation\n    \n\tsystem: ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"root"},{"body":",\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_heads"},{"body":",","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"the_tails"},{"body":",\n    and the other registers that will be introduced in this section.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/5.3.2#footnote-link-5","child":[{"body":"The term \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"broken heart","tag":"#text"}]},{"body":" was coined by\n    \n    David Cressey, who wrote a garbage collector\n    for \n    \n    MDL, a dialect of Lisp developed at MIT during the early 1970s.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-6","count":6,"href":"/sicpjs/5.3.2#footnote-link-6","child":[{"body":"The\n    garbage collector uses the low-level predicate\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pointer_to_pair"},{"body":"\n    instead of the list-structure\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pair"},{"body":"\n    operation because in a real system there might be various things\n    that are treated as pairs for garbage-collection purposes.\n    For example,\n    \n    a\n    \n\t      function\n      \n    object may be implemented as a special kind of\n    \"pair\" that doesn't satisfy the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pair"},{"body":"\n    predicate.\n    For simulation purposes,\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pointer_to_pair"},{"body":"\n    can be implemented as\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_pair"},{"body":".","tag":"#text"}]}]