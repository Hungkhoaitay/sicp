[{"id":"/sicpjs/4.2.2","tag":"TITLE","body":"4.2.2  \n    An Interpreter with Lazy Evaluation"},{"tag":"TEXT","id":"#p1","child":[{"body":"\n    In this section we will implement a normal-order language that is\n    the same as\n    JavaScript\n    except that compound\n    functions\n    are non-strict in each argument.  Primitive\n    functions\n    will still be strict. It is not difficult to modify the evaluator of\n    section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" so that the language it\n    interprets behaves this way.  Almost all the required changes center around\n    function\n    application.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p2","child":[{"body":"\n    The basic idea is that, when applying a\n    function,\n    the interpreter must determine which arguments are to be evaluated and which\n    are to be delayed.  The delayed arguments are not evaluated; instead, they\n    are transformed into objects called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"thunk","tag":"#text"}]},{"body":"s.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-1","body":"1","href":"/sicpjs/4.2.2#footnote-1"},{"body":"\n    The thunk must contain the information required to produce the value\n    of the argument when it is needed, as if it had been evaluated at\n    the time of the application.  Thus, the thunk must contain the\n    argument expression and the environment in\n    which the\n    function\n    application is being evaluated.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p3","child":[{"body":"\n    The process of evaluating the expression in a thunk is called \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"forcing","tag":"#text"}]},{"body":".","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-2","body":"2","href":"/sicpjs/4.2.2#footnote-2"},{"body":"\n    In general, a thunk will be forced only when its value is needed:\n    when it is passed to a primitive\n    function\n    that will use the value of the thunk; when it is the value of a predicate of\n    a conditional; and when it is the value of\n    a function expression\n    that is about to be\n    applied as a\n    function.\n    One design choice we have available is whether or not to \n    ","tag":"#text"},{"tag":"EM","child":[{"body":"memoize","tag":"#text"}]},{"body":" thunks, similar to the optimization for streams in\n    section ","tag":"#text"},{"tag":"REF","body":"3.5.1","href":"/sicpjs/3.5.1"},{"body":".  With memoization, the first\n    time a thunk is forced, it stores the value that is computed.  Subsequent\n    forcings simply return the stored value without repeating the computation.\n    We'll make our interpreter memoize, because this is more efficient for\n    many applications.  There are tricky considerations here,\n    however.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-3","body":"3","href":"/sicpjs/4.2.2#footnote-3"}]},{"tag":"SUBHEADING","id":"#h1","child":[{"body":"Modifying the evaluator","tag":"#text"}]},{"tag":"TEXT","id":"#p4","child":[{"body":"\n    The main difference between the lazy evaluator and the one in\n    section ","tag":"#text"},{"tag":"REF","body":"4.1","href":"/sicpjs/4.1"},{"body":" is in the handling of\n    function\n    applications in\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":".\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p5","child":[{"body":"\n\tThe ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_application"},{"body":"\n\tclause of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":" becomes\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":1,"eval":true,"prependLength":492,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokdpSWWgD6ZhZGABRGAB4ADgA0xiQmAJSgAN7YoIWgTEYUREyh6kxkRpGiCTGWFPFJaRnZWQDc2AC+gaSU1tpU9BSRNASRikwu0eZERvQJKfTpRpk5uQCQBUUlZRWSisnLyaAAvAB8YWXmc7GnaxtrK1292EGDdMOj45PSRh0+iM0imMyWrVW7U2OyKxVK5VCrGOpwu1wBQLqFEe0JeyXobz6HwGITsyWSWn0cSC6WmLih62yeV2clAcRGkWSTCorFEVBMtU+IWppCym12cP2iLJFP0nO5vOoAsiQuscQlcM1mppPzGEzBs0aizidIZGy6WqK+DIYkUrhBux6xi09CMoFZ7PokUcrGSNFIoNVdBFJDFzK1jgYFHh9CIWmj52MjWU8Q1lvTWqDJEiACMZFSgllUmmM6XjIlmiRQYyqCwSKx1tiS2WW1nOdNFA3mkwloXiy2B3CtCM9f9AYpgaDTSbwU9sulrbb7dJm4O4W2a3WGyRsYWxd0tVLDhyj9mjXESrH41lV5qAPzwg5n+a1SOV7GXuMUG8DgBcoADIx5BIEED1AJ1AVdcNNSMJgWCYEN0gAIlIABrEgaCESoSSGCh9GSN0AFpCJlSkkLeQo+iJLMkzuSNZBCcw4h9P0QJ3OcYV2U93S9CgmCIcQqXsW4onPei+ToO4uRBBQU2YthWMbItoR-dMH1MeY5PExiokjV0AEcFh3eTfToJSONvf8NIsLS6AY6w7nMbsSCsAUTMUndlMZQl+mCIZrMiAyjJqOJRlYCgzSZfI4Q9DkjF9PDAqMQz1hCsKIrDaLLW4wDgNAjUIJdN1Yq9HRflGFNt2xdKCXFdNuOspp4nkHsxgq5oqtCihwoJVJvLAyjnSgrKI1UaMWvK7qxiNC5QFvIpGrkia2ooSrGy6nqi361cSsiU97gWala0m8KDqMTL5sKbjlsCqazoGzVCuGy7H2lAKgtS1M1xjFa1p3JYaq2jYHrhPpQfeYk-O+eglGzf0xgBMgdCYKxVHcszPOgq6EWPL0PvIeIWIx79LofewyCIVg4zk44CKrftvstEg4y0BnGc1ZEThhu1xgEyJEeR1GGDZ9nLXxmpbr+iL0bY78xUu-8OQFjthSJ2XVIzB9h1GOJlZRkJAv0Vg8y0GWlI19N-2ZrQtG6aicO+AKcy0GgyFQs32OhLHQD06M82kQxE2d13UNzfMPe-B7fe0V3zEYRNubhvm9aFpZ-f0Ciimj0hFHoegqBcEDpHj3U-kiHO84Lou4hdpQXUz7Gn1omzmjidOXkratMlrOhOtruORdFofCgr-PC5BKEXuHltvJ8mjtdHcuXMr8fpFCo2TYJb3uM59fjZoLQ0VAJCACpR6rkET6Q9J6A3g+CTt3yvlCAL9va+L1rVxsOO3nGkUUVCtR9rnkWq3farRLz52DF-Tyg9p5llno-SGz9m5TBXvWT+CliY-xGj7MaoAZqJlAfEXOY8ME7jOpECBiwoEkAjkWKeg5tpwlIVXQ2+9RIvhNOgqq7CTb0PSEaDiD1uJGiQTRAKKdVZYNljg3YrDC58IPmdXWRgkYq2sEo02MDvzpEYemYhqj1H600UaKhKRIFqh0Qw+BBjnj6MtMw16hxcpUCLuIh2oQ4rJmaKCcQaE4g0BzAAKzqnsP+PFIirRcC4EEkQF6BJCchYhfixBoXIo-Gi-iSChxAT4uJ2TUJhMbtKMQRhFBr1WlQU2KSolpJyfud4NEqgS3qEE0J3tdqFMSaE4pmpo6fnjLNYSEQVEOLLIU8xJx2k2NsYUSZjIemNPTK6MYZSKk9OSfk1J6SG6alWZEdZlTFDVKWekQZkdCj4BKBSewbpWigBEOId0EUCEvlXAcqppsvlnNANbLQForRgCqLE6MpAQIghBO0Vc3ELmdFhEUJ6xUCBsm8ZpXxdSAkzL6ZKCJkzzwzIeki72uKm7tKJRDGiGIJxYhxN5PICKSmHASUhQp19yxtG2n0GiHJukzLyHCDU3FeWKBiXEhJ7TkJsrnp49w9TQ6tDiIUvp3EjlKpOd8+VjTuWyoWZkJVWrf5NzVT801WrtW4HwFmNQLB2BQG8NwdA-AAjINJCKsVoIEk6PSOIWo0SVURI5MkE5CFrGgAAGThtAGqsN5w41yr9aKjxUMvGlVELBJiYbcHCt4qK2JnqRwR2QsObs5gMlNNlSWjNnCHhZsFaS0p5TjmnOsT5V1QxkSAPiemlGpsjQBqbiyqtvb2X9uTSgjkLkGz0KNdKd1+bu0629cfKdRhy32xTUcLtq694mwHdKFlq72W3w4W2miJ6TZlx3VmoVESTUavoWe2VHIFHkOxDehtuMol5vFYW5dSFX1VXXe274gHGxaJndmu9Tb1WnPvS2mR5sLU0TAxQsx1DK7QMQ5jKDxqYOmofa2p9m6lZqMFtI0y6tZ1fuiQur12GKDIV9naBGZGNF0HIqAAAPlxy687f1LoY8hMw3JFDO1qFI6wnGeN8dzR6xd76hPHzbJJjjxGUGqezBeg+kHb1N201EfUO74PaIY2KGVm7NOUIw7Q3Tn7Qgmdg6ZyjSHx2kk7a+MaLH+ZsZMcGVdgiXxTMsXQfdzLC1IWYxQzT7KAtvNiMFmh1h1NutKp2HM0hFCJcw3Qj94Sm78YLYJlznskI6GNpl7LtDgPz3S5V4NKMuywS0UsPLTL-5czvoZyYcXHNEcyZWurWX052fy42jZBGEMlbliljtADajlYy1lmzaoGudlKLBKE6cwuhCHUNqrUn0hraaz2dI223NDA5Cp3zQtINbHrWNmjP6iuKem8ha7xihY1dlR98jmjr1meo7tkce0gJFtALwCzKDfvsezMdjbPZRvtdLiUAg4OMBQ9JDDvz2YRtteccD34qPwcAGZMdDF+1Emg3ovPRbI0jgnW7PNRm85p9Ua5sdC0iAD6bsyBwefiftlbwZxmFE5wbeH3ZWtmbgQOcXmi8dmYtSB1NoOnySw6pg3nWMc3fvk-Rt7x836rU1zub7m7wEWKS1h7XI1VX4cI0ri73wOTaQcs5jy34geRNowJ17numN2Qki5KIwuSDSd42WQrCnweRaDzpDXH8zfk++G7ySURpKyCUK3Nr3EF6g7R8uyHA3N1p5DzThgyUjL++JsUvPIPifLoxyXlBZfHLxlgi5JUhNAd24ifnxvSmyfO9V+LeI6U6+Brk3Rwt6VkJj-NygsfieqoAympsIoEp7cTYfRPlPlRjq-VN9VKaW8+94Y2YDFvpJLxH6T9LQGOu8W79P-vyJ8VkiJTHxtDKT+Cten+R-wfgrRIzS0miliAMn3-25xZic0gNmxdy9GDjdgZ1119xe1j2QNQkX1JCwLDgDlQOgx3ym092Q1lQFywK6ilh211DiCQiwOPRN3vwQNVxoAIn1g0Bp2NjcVuyzXu033s0iRziYDlDYIzQ8CYC4JzB4Io1IO40j1LA5GkJchEPGHYOUE4J9GUN4LM2v0uy9GENEPUIkKkJkKsV734MKD0znWnz91j0MLUPEM0LYG0JCBwP0NzB4NULEI4MkK0LMJtzkO2Ae2R2jwNwD2Pm0O8OMOcO4K7ykzfx8I0MkIM0IMHQbzByLzfxuiSKrDSIPQyMLyU2bxAKXzUTskcJRjyPx3ryJ0yKHxYKZymHJGHGzzVA3Ctxy1pBmEpnAzDzP2sPCx1gAxaNkjcNlwzA6Oki6LsB6N4X6MaKSJMP8PiLoCp2aIpDGPMNtw1GjiWI0Fmn2JSK63oRESnyXmmCMKcL8JcICNyzM1JiaNplaNuwFx3SOL5zmUKASRyPUOqKVwtktH-AF2eK2ODDePW0CRiKYE+K+J+MP0qLtDXmsQmK+NAFdHokRP+N52Vx5S9FBLaMCNrz-xsL1xn2KwiJGM2MJPD2yM8QOyJKo3P3G2bQ91rzfzpAZIYCR231ZLgP6whitU8RtTYC8C4F8D4DQBJyflSyiX4kEjiESBoKUJoAPnKToSVLmjLAfESAVmMDgg0EVOQjzDVLtA5TUV8XOTUSMH5BBHcMQJVDjipE1NyEZwAEIfd5SxBnSLQN0UEBcsw4hJdNszt8w5FBCWUiYAwVRPFr4HFgzTtQB25oQ9CHSoyqwYyU1qRlTbCMCCBA9TJoysx7TsIU12xGsEdewaCB8wd8yIc6SyyRsCBqzCjqR0gSidVN0Nxu4tx1pmzvcay0c6zh9KVyD5s1dEQVE3wlIByItgEXx2VpzPJUzVd5yHh+1vcwjC0hEjc-4zoSyCdKElzsQNzcMWS4D+1GjUoXZ85XAqEeze51p6UzzDgfkuUVdCAESCAKyEgNhvc1V3zo5fUqEEo5RNxHydxZp-lugPyAyfyDMoQjQBjBDg1axd175AtYhgDOzocKyWtqQKyN8BDHsHMYNvz1tsi8KkKCKKKBViLkcflyKGwryKx1gu4TAe4310KXRMKttc5ahnzBjdt1gXBxBuKt441EwtARKxKYgCRHjUKEI4LISELeLlIcx+L7zsg9TpLXAxKEKcgAAebQGSsQOIOSwErUdSA0hCVlVUo4EgQwOkXo-6dEogUYkEf8JCUAAAai1PZlGG5FcDkCpAMt8uPmQnCtF3RL4jcRcBCvMrjnljLCshsroI8E8AICMCEFmJcBcteVjA8ukC8qitFkCrioSrCr8vZW8r8uivKuCoICpAssaJdhoFQncq0RUQM3DKKAkUyHiVVJOEEvTHPVhnErUpJWynOMAIMuivUgGrauGvIBvLiq0s4s6lnmiv-AMwuHjTVTmtFgfDVQsu2vRPGp+QMp9QfRapBkRR2hRV-JMD2sTGAo-0SnArfRxUcTSp6uPlIDzADD+XW3LXTGJVwXTGjiYrdETBumhqer2XqgiUThoobHwuhthNFmhrOl7EIsRvuvBkEMZEGrYIRpHzsHQS6vPD+piF6rF1lWJqWoRqmvps3RRtUvi2QrLF11mq63kqOvaBJuWqRhoFvNmE+s2vNDOt2skujRg0OvZgfAOROoHni0sr-HOrtDgKuvcBuqSvxsGgerZEZBeoTRAs-zAofK+pZpgl+q62QgBv9CrGBobFAGIgprISAwNvAiGjdAhstChorNmjhp-KcVLG4hRuxoQtRvOlRI5yopfFxoou9rBgJpIsFqZvfNsGtWYFFPtXFJ4H4BQBlI8K5B5D5GVEDMLE3NzJjx1CQjLsVFtIPMbortqB5ApHv1u2rpfNIuINNj3CQWjlbu70zOfhLgSWbBZSOXZSKCOQHExtoNZQ1VnvmQ1QXtlxZUUtXtAEUo3qnoiwXh3oXn3stBZUnRZnZQvptlLEXpZVkHoFuX0HZQfqftvs3oi1gnglXq-oOLLDvoi2RHECmBzHoGviAbEBAcYHTAAeGJ8p3qKCNNAAziPkSHCsMFAFgexCQkIgQcKCQZQauFADQZIgwawboMIkMNXrQbhCIcKBIhofIdPjwbZESHSEIeuDQZPmQcKCYeABYYIZyCIbQbADIY-uGIAFIBG2HkGhHOHQAJGeHMHxHsHJKEHBHUHTaM4VG6C3S411GZGOHiHQA9HExtGD7hjDLpH2G5HjHjLChzGz6ItDLzg8GNHhHQAXGHGmHLhrHZHNHrhvGdGkJLhXH0hNR3H5HQmgmLHsG3SWHjHaHAmTGiglTmw3hh6FQ26x6DYEKLgNRd4jkjssnR7rUMn8ER7bScnNF2kLT44CmUQggj4t6Snm70hHM9xF7d7WnK7hS3hsBMny7R6otXkpLC0WVXEi52VJmQQum5kWVIASBgJRBn7wnFnlm8I5nbEWUIHIhYBIBV7dn9mtn4EdnlBIGABRHe3Zi5k56eFlAAOUUAeZYaeYefVrmXKajG6aGaqZGZa3ybhF3jICPhjWUkqeVBGeAMGabshdp2mkTsBaKGBdBYdxbTFGKd+bhZZ3+n6ZQxaLlAhcFE8UQlyoXhoOeLlDcSXgBCYEpDWuCUUDMBhm5E-3Z0HCJbqF9Gkqqm7tFDjs1DpHJc6E1FHLZoRGSHWt7OMhoKSE7ilYguxFpjYqDJ6eJbLNUuivZk5f+auq1dLGVbyM5bbFqcoEnjRNLB1fhZxrufZjetAoVa+qHvwWApcBdg0tDytqqlmlWU6olvWjxYZvyXBxGtCLTVLTZPVnmi1h7TuDEgeNLEVgAMhOsWjZjnas6oM26q6yvRTZl2hHmiTY2JeNkNrzTcpZNHCDja4SmJC3uN5w4gFctE5P6IEQLcTciSONMNWPrdILTcMS7ZWK5w8GLbBN7drwsg7dd3j3d3oX7ZiAr3snTxDY2ELciUW0qzDzndLAfADJJY3aywTPwpRP1c1APfwKpBRPbYzCLe-1TZ3dQW-2X3flXzbe8jXaUNrndnvc1lQUoOXXfana9GNwgJ-bUlQRA+PxXe0qA+qbWLZzA8tHUmDcpxHf+YFjfdXdg4Q4Td-ckRu1LdkWvctkiVQxryjYfYCjI+g4+cKFSvgnsJyQwiwnRP0B3EUBIZImIWAwGfwVYEJZYBcEa1mga1dDoN4BFddL4gWBFZJxFZ6HLUMX4-lBoCE87B9TKXNo+q9aUk6CAA","body":": is_application(component)      \n? apply(actual_value(function_expression(component), env),\n        arg_expressions(component), env) "},{"body":"\n    This is almost the same as the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"is_application"},{"body":"\n    clause of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    in section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".  For lazy evaluation,\n    however, we call ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" with the\n    argument\n    expressions, rather than the arguments produced by evaluating them. Since\n    we will need the environment to construct thunks if the arguments are to be\n    delayed, we must pass this as well. We still evaluate the\n    function expression,\n    because\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" needs the actual\n    function\n    to be applied in order to dispatch on its type (primitive versus compound)\n    and apply it.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p6","child":[{"body":"\n    Whenever we need the actual value of an expression, we use\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":2,"eval":true,"prependLength":518,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEfSoY8zwMkyNxFvicT0J+uQAJAwo+ZRxnEURWaAAC8AB8diUJY1zotEVmfl8BL0FpunYL+dBGRQJkYTo+hGNIeqMpZYW2TkDldE5oSsECbkEp5Pn-ollSiIVcQhcYYURXpUUGdYdjAloiJBGkZk2WauQdHIoBRAshJUKwohUCYibRcRQSZNkeTTLlzUIhmTDDaN41Jo1Rq4Vs7WxfFZlohY4ZImln5aXS+BkGIiiuMlHQ6cYhZGPMBD9VaaykClk3QSQM09dMKEUKARJEFoQMeWpUHbeWBSTZU1ZtaQ1LQzD+I5jauIZFQLDcckUQozDnRw5m9QrDmTBFtNpaE4TNTGU8CWKElKWdSdLhdYuaSXddt3SATZZw982N0Cx00zdp83FE+9G5YdGIg2DX7TL0ss3BqyTXgrPYw3Mn1GPILTSBLoAPUYT3-VMdRCT9aTiSQknSaEk3uPogrKap+r6Bpxt6fVzvser7p0J61HJJl2XA1LzkLBQTBEOIiLIv5curDao3B4MYayGCXacmdvZkZBqdB0sgwoWOPGgfWi69nM7FF40ad2hxYN1Nq43YWa2l+5toQB-QFedlEqGsBQHNUhbBR9QNVRGPEFD6IO463BQo-hbNjYLXrBvJcbBSm+b08LDoxmoVeeMj2Pf1zVsC310q8gU3FZ+vtel-hSki57ybj0D5PUyA0INjU+q84o3E8qAaG98oKPxAefd879qRf0bEfKoqtAqYmAc-UBKdr7QwWrA7Bo8U7fy6AfP+N9eR3wHAPIcQ9+aRzga-Wcw9QEf2QX8PSZDIoNWCE1egShnw0HjhhQClFrBzirm0f+C0Fi0OXqxcC9gyBEFYKDJU8IkjSGpjTLYJBQZaB0boqY+VXICJuo8ERFFgISKMcYrY8jhyJhfnPVokjQ5tBmttZs1iiKKLpDsCo75fEhDzPcLC84vFljmPorQWhu76T4TFAOe4Dy8W6pQ0AgCEYQNSfseGMhaxSIil0QBa5zCMAhuYoRVjMLiPZAjEpnRAGkE4iSJiyVKl7QZq0riyUojlMLE0woUc+7DCVAjUK6MUpCxxixQZNkGH2LLL09phsupLOWXSRcdVeGwVCHTOKPSlh9OkMPfMVxwoyNGS5c54TipiQAFSrKoB06QjzRJpDuAWcKCS9mGQDrLFxLF0mLmueePK8ZEzoKOm5cZUFZZWVZJGYpditmoypLs-5TUA5tNebjd8oKJ6ZMAeAiG0Doh4qYm+FOoZkVGkiWi9FHDOhUufN8h4NwkRcRpRyiJqLQA3E-N-BaNw-n+wHCElFHjModDZWEgsKcohSrgnyzumyugUuVXUmxcE1ZIvDGyYijKNXlk5qagoLKt42n1hKXePDnYLApSlcQEllTnAAFYbxyjcmOigXAuGStUIJ7qPW22dUhMQElvaRWdq6+2SqI3xv2N6zoC0xBGEUGcqcVAsJJqjfbcWsbe6EA0BOCqNBPWpqnq9Geka3WVq9dWgBqggZawgUnVEXKLXTGTaGUNyN0W9oLfk74A7hlTAHnFDNWbQ3hvhUG5NMa-hTsqDO7Nihc0DrSFrc6oB8BFBBPYZ67kRDiHmGPQVgVGyrpzVhO927QCxK0Hugo+B1CMmKKAUgLRkrJW5JvG5WtNIR33r-Z6qDcQLpdSO8d-8fUQvcCOpVjaJ3kOepkhD0tG3f19ok-ZoBSpM3Ku+YKGTQOR0Q4cqIokl2hSql3YtSTyhVGTQO3IXRHK+tY-6wNKVqONttku3ZcbkNWSiMm5t6bM0bq3ZJkTJa+1jsk+C6W66JObvvZpiTI6ZpYvfb3NQLB2BQG8NwdA-AAjYpin6gNQbqPpPEImKcLgpPcYzJu4SkTQAADIfOgHU95jywWkPOf9eKktx9+gh27G5xDtm+PBtQiJUSNRybmBjXpZ2aWhQBVhd5nInGsPOXUw+yJWLnb5QTMG9LWEbhxeltR1L0WtCfKvUdCrkWqhLBWDeVT0ceN2f4yG9JoketGEy-hwyVXEzjbuQWBrzkmvjba3yzrzHQB8vinNgrXHEOle0+ViLG2FhspBcU-rLGkK8fsyNqRtszutEm87R76E1W7eK6EA7W7vv8o8XphTG3XtgMCnSw10rYuXYCzJjTcnDvFKLT3E7+EdV+I+2m9zLnEsOfu2JQGN04oqpIBpUAAAfUn20Eu3eS6NswK1FCrkTETkn5PKeDex3dmVYk4bM-WwRonCqrh9cyQtLbDM5u-ZvIj6zoQBf6pZODhlF2Rc3Ml2VhHfPptQvVmfdCROojjbSPLsMEY6CLYOSG0S+O9eo5CG1w37WRhg9N79Y7BHj7LDTCGA1Lvhd7ellT4bNPcepc9+mH3RrnslsrCGEm2Zcx8vcZDlXiHTHzYeOL14aRJflcBwRmPBSax+8+9D2dD71f-elzLuM1WC8R9JHHsmdQuqNKh01uvCuXdtcb8UZvaRGlu8MgsHntuIecnskVjH8X2fU8JSHkfYjdXE7z4ZBfhFQk7eV-7pbQTKhFAICJXgK+mpr-qc+Hv5Mk-j5T413f++RIYGPzFU-S-C9FP+23u-+sRIAGYn9O17lEUGGQlbQJyAOLyn2lhmx1zQkJ1Hy2hphfyIheF6xNRpmgI7xNyNXxmWSQNCQv2b2wg1TwJxARil01yagWCBSnGYTnw-0oVkRnyDzoO7FtmoPgSjw20RU72wPR0ozUxhwr1iwoJsyqDdHTlLggJGWn2uyGySxYI+FtnEObmd0j2yFZzLED3kJS2UI9EGGBSe3-yyToBLlRCzgUCVD4IWkOT32-3SSPwSWdl0Izh10HgUMdEnmsK-wP3SUf0cJLWcNLj1FbjKCsA7isJuRsPv3ST-0H0oKqEcSHkvmrUYNkI52S0vltkSJHE4II2yOcRoNcRYWSI4wKF+GkzL202SKMMIRfCKIQTYRSNVxh0QX8K4PDGwXgSLEQU8JuQfVaKY3d1nnnkXnyNYTXiaJkOfXGKvjaKGOqE4k6NoJmKuQYPc2mP6MaJEKuzySkP4IGzSNnxSzyVyMMjyTfz2IqNkz+2ELmK12q12IMI2E-2S1EhOK+UKLfG2PohVGAhFDFAlDR2Vzskn2kIDyqFaSYEXl+OFHVABO1CVw-w0N5AWC1AZGhMFD+LhM1EBKolizuPiMqEhIxNVH+JxIRONWBNBP2KuyxyONG2JMeExNhI1AuFxOsFOMJLRKhKZNJOxLZIpOFxBM6G31pJu2YOOMBJ5JhLVFZLRLtyMJlJFHey3xLyiLsNxwcMGNXywV5PqBtEuMiO8IfyMIHjdD1JujOT4JpL2miNx1iIdRLWgP1AsPBEFh4OsA6kZFUVaFUIkXN1ihoxdLBA5KZTpHdKwM9LsG9JpXr1UG+KVP5PlJ1BoD1BaldLHw8JJVbVAETIgUTMFxuM5BFXc0ZILPhKBP+22l6GdPTJDKNGgLm0TMHSHS2Go1qJhINNz28Rr0TGDL8UbNeGVGZLVBbNbIrBDQ7OZK7NRR7RhjNJMItJnMr2+NOzrMrOT3KMx3FO0NG37IVIJOf0ALjMpPoK3P20EPh0r0PNCAOhPKvyzPPIEMqLhy3Vzz+QM2YyMzYC8C4F8D4DQB-ym0JNjnjjEERDxADNRL2C0EzWIkgsgTLF6DxB7Ktg0CiDxFtkuCuDgpqkFEoGSh3QAiMDGmSk5NEKTAqQgtmhtIAEJ6JQKE4MLzokcCNoDvoCCKZ+9ClZU1TLdpRPoNpmNPkGFOKW8eLGMssutWSEhBLvoCAoKmDtCCAlCPoMZJpyKADmMPNSZe8KZMQAz1SD8VLQAtSpKNs4YyCFKXi4p78TK-DtST9jysY5lrxrKb8d9jI7K0gHTWL7joVRklVrR0ZpEPKLdXiYURg2tgqJgbyZZAquV6soctDqMhUxJIqJsjCMr1YQqogkqwrS9ri8rAoq9-ZyBdgSRXBMYTBhYCU3JiVRT3BtNkFzKCNaiCBdL6qsgod1MWrsBAEnNcQRjqraq3wIFn1tJq92LOrE8jdApVjGrMxsZ09Cw5qjpflHLn9dLCzKZdKaKRSS91MOrXgajtqLJMQ9rSiyiS8H1jqVhvi0YtERrXKL4LlVr2sW9OJEwwUCrYLXBxAVqrlgsIY-qXAAbwhwpqzQAlrhJpqhzZqPquRzgvrqqlYmxtAkgwaxBAbsgAAeDG-67GiGtGvsASa2WjPYOMEgQwMyH02cTbI4EEKgZKOYUSUAAAakQvsVQhWlcDkERET2yE5razZs5o1R5olBcH5uKqGRJv+DQuEgps8AICMCEGjJcDpsvXoEZpqBZrEg5q5uMQlr5oIAFrequWFttgNvFtjkluluJu+N2AOCOELKVT5V4qJhLW+GqD2Fch+sbGdmqUBrWoWvLFSOmMFo1XlAyB9oFHqsAhoEqqZFmRFmvB2Q1TmD5U8hC3U0juWV6HU2Jozs20EVhywkFrSAfQdtIU6C4S2Gnm+GzohkGrnjiAXmetTueMwy2AVpWttlIEuE+ifVeGXS2HQ3gy2EATuueghnas6pZSoRuSDunp2oupOrDN0RXvOunqLU4RhDrrBOcm9qdr9qpDiJinlS2y5Xdvaw9thi9pjpPq6ubS6EDtLoRuJonslimIMRxqju5FjtPoTqTo7rqvTuWUzreqbsKr-vzs22KDXRhwhrWrlotBLpujLpxsru02rsbAehQVrUbuBtCyGrbsXhToJRfp7sEnQpvrtkHptGHpWHdjsB5UMJrrAzNgoWhint0ogTnqHIXrpFF1LpXsTzXvuo3sQLOvmokaMF3rHv3sauPt9ufo-LAEmm-JM04B8B4H4BQGAooqGhGmoHWnkqRmSqUvbNIFtmMbWkyrirsdMcTGGhBHqL8Wmh6svK3TFj+UAScdIqEv2S6WoxjCa3XTa06HXRhjHK6CazvUiYKDvRiaZSaxhsSehs8xSbCct0OQycOWybbMtwWGfTaxKYMV5Fic6Ca1kHoCPS9jSFqfqcqdSctwVsSYVvLCqYKCa3ynED1HOHoE+T6bEAGcYD+G6cDNEnZoyc6AwrSH0GyG8lAEUk5sMFAEmaayUlmYKHmdAEWYeUUlUnWc2ctyUmJMScUi6GWYKFUiudOdeI+TSGmD2YOeWcUkeX2YKAeffFEmAB2f6kwv2aWZ8kUjABOdadeIAFIAXXmQWVnQAoWvmNnIXfngbZm4XDnoHFnUWaNaLgsMWgW3nQXQB8WIYcWcnXjcbYWiX4XFJ8aCgKWimqWPIdnMX3nQBcaIZgXcXRIvIaWFm6XQAfJGWfmaMvJWXnmuh2WSWJXRXeXaKAWEXrmRXSXOhIKYwIp-GVoTHAm4ZE9PIYQ09100gAmzHDMtWcyzWJpADG0AJL0PIjWCoggHk0mdX7G2tJcxZJnob3XnGgmQgNr+qrW-XAnrcHXAymtt47VpA2to3DYfXxypnIASADZRAGmCgU202F5E3xzenlBRnYBIBEmRnKgi3c3Wz83+mABRDJ0t6titodJrAAOUUGbYBdbebdQa2UtYYCBmtZgLAINcda6DTzIAeUCy5AHfDY2u1dWn9fDZTkqSddcnHeWZzxmlNdDfWhnYimr09mWnnb1d7htnVsOQDIPYlCJJtSYFaklsqA9UUDMAERWjbpwMJgHdcdgrfA8aRikamDMnPc0imEdI2ynRdooZYgDMeoxkg+vE0QNIHf1fNv-aTd9aPZ3dALe3NsbfsQQ7OSQ9tc9XtY2TQ7LGnaw5B3Wtw+MRbuGrg42D8ZzMGpcF2GRsGAY-BngZKGOE46iD3Zez8i7QwTI39pLw-XLVIwXUqjOj+U7TywxBJgHho14ANowE0g0krozUqFY8rVRE460iAA","body":"function actual_value(exp, env) {\n    return force_it(evaluate(exp, env));\n} "},{"body":"\n    instead of just\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":",\n      \n    so that if the expression's value is a thunk, it will be forced.\n  ","tag":"#text"}]},{"tag":"TEXT","id":"#p7","child":[{"body":"\n    Our new version of ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" is also almost the\n    same as the version in section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":".\n    The difference is that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    has passed in unevaluated\n    \n\targument\n      \n    expressions: For primitive\n    functions\n    (which are strict), we evaluate all the arguments before applying the\n    primitive; for compound\n    functions\n    (which are non-strict) we delay all the\n    arguments before applying the\n    function.","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":3,"eval":true,"prependLength":503,"program":"chap=4&prgrm=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-IDZwgQXaco9ocX2-Vs7u1DvqpattRxRjjCgD8aY6B5iAnMU1Wt1zblZBzYlLat461TsuRiV8BtxKgAAGR3tAH2vS9g7CgNPR2a52yS4MSxDSSpZ97GXtxQehtDyMqZT-biOgXzh1tqpGDKlUMwyVoMNWsFEKxWGoA1khd78f3XlvFBvEB0L3ZvA5B6k0GC2ke-VNTk75b0xsbhUfd9aj3gcSplXUNVxq7tBIRnUjGNFkYqDm7j74C0ibo01Ip5CeNMfQ03Gd2GH4ydBOaUpYkX3MdWmxw99zmAQYKQpWDEQEYmZSQMnTSmKgqaNfZnDe994lp-ZZuykzvEnkU2SXtmH+3zX1XpPD-HdlVxvh5QDuma0gfY4Zz67Ssq61sug4+S8aC1VAAAHyyxbfTYGjNcaENwCgnAmK3nGUQTLOW8uxYM8e2xWUTLhfcmZ-DU1KvdOVD5i5Tc5McAU45h+rbS2dc80eDJviou2doENoLZ8QsI0E8luylWJA8aUON9JPiiCidiBRlbqWtLpaqya98m3vRTMm7t9TYWQLPi8zMlD0XgOfriw1xLkHdwPYmzttrMjvsHlfLiHkYMuu-h61mio6jvxank+dp9-n5u4bwwDp8YEoGQ5Y7NpHqnkfOb40tpxRHAdXZ2xIYH74wYY2wUB8jRmvvo7JyeAtlPQc4hp1Awn8GMTNbWzp7QVbfMxbe-VzjjXMp87SxF-78GpfHYi0JvUNnheXNkUYPAGVZgjZ-fLk+6k2cfhllj1a6uNkZQwDrqaeuTuQIgibhxZvNeJQAMxW6anryy1kyKrePg7y5y3iUpZazaHJNvFcKb8TkwT92DyPf7Ey-Q4f3IvjfOz43UeAnJ79MA4bt2GJWLltvBWKuodhbrWLwrEvC+Z1l6Wrxv3vOl+x4jnl+Owzc9LRiJ6x1-dN3yxxqvn2e9zWZzEaruWgID-ixBkfwM5LF7IHXn9c+uQnTOr2R603etiYeS483iVteuamqv16Qwk4l+32X0hrANcW-d6CU-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-zYD3uKWkD4G4m6ymyaZSgKLxYmQ1j-J+jDOkARA9MzQ7DXj+LhLRM2LOL4mUjLAsAkAaD1LtLFL-JVL+w0jAAorg9S2y0yxyeJgAHKcB8thMCt8up0SL7PQtgu3iHYqXnNkgzwkBaLPpxVSvwuUQSuHB6yqsytq1ysGAKtKsmlQggswtPNwuHacF8UuiNCquDnEC-G8CXwmHWtNCmTrLcCuiB0nKcBCAoIlasUpxryqvf2+kKR-231T3CixhOvypVqlmlqcp3Vl3B0SAmGWWDxB2RQDyLG2unPeWRs4v6DatB52TE1DVATZtQq5s7JsCnLvNKDluCLFuavB5q08sBIl2sWNDJtWFmJMV02OtPLuA9vwhmyJsygjsKyQsWaMluiP3LUYyuXepZjVslzfPBqxoOIuuruh4q32s37aixj6Xug5A3SxuOi9AkCrC2SHolAC3YpuyOGwhTltrruEpwLQsurxK+qQiNvfU1ubkRt-sjLSBWWZtiTAfCizlVnU7rsFsSKyLkLJoZBZCxiSBocRigCXvXtvCZCQdb01uTtjnAsd2yHuyMLFIuqx2UjwV-liRUerzsgYsMxqz3tC3TURnzvZR-J5QFQEc-pEw5gt3OCzt82gARD1QgMiCIsM5SsFoLNaOtXqOhDWsU7SdKA5okNUbCAFra4acUbEYwZKCW5xUfqDsKjDsI3l1ypAA","body":"function apply(fun, args, env) {\n  if (is_primitive_function(fun)) {\n      return apply_primitive_function(\n                 fun, list_of_arg_values(args, env));         // changed\n  } else if (is_compound_function(fun)) {\n      const result = evaluate(\n                         function_body(fun),\n                         extend_environment(\n                             function_parameters(fun),\n                             list_of_delayed_args(args, env), // changed\n                         function_environment(fun)));\n      return is_return_value(result)\n             ? return_value_content(result)\n             : undefined;\n  } else {\n      error(fun, \"unknown function type -- apply\");\n  }\n} "},{"body":"\n    The\n    functions\n    that process the arguments are just like\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_values"},{"body":"\n    from section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":",\n    except that\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_delayed_args"},{"body":"\n    delays the arguments instead of evaluating them, and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"list_of_arg_values"},{"body":"\n    uses\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":4,"eval":false,"body":"function list_of_arg_values(exps, env) {\t\n    return map(exp => actual_value(exp, env), exps);\n}\nfunction list_of_delayed_args(exps, env) {\t\n    return map(exp => delay_it(exp, env), exps);\n}"}]},{"tag":"TEXT","id":"#p8","child":[{"body":"\n    The other place we must change the evaluator is in the handling of\n    \n\tconditionals,\n      \n    where we must use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    to get the value of the predicate\n    expression before testing whether it is true or false:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":5,"eval":true,"prependLength":516,"program":"chap=4&prgrm=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-99Cb3KtpEZyyZndBruhBS-zwHYj6ckAy0LzLIxzs8p5zJ9uQYQxM4u7yybhXpsY7k6V987nKxa9Fzr5bQazcZizDzXMjXiGs-13Zfh4ykUU9eGkKnkWaevJt2Td7kHn1U651dp7Ec6s2+1zyqIXNsx1AWlEtnkvDUeeWGmc3YZLdpHj-bvmaQokjaQwsPHdO1FBciiFj7Bvisw5N79svsuiJW6Q03wiujesk8229IoBARK8D94ZdvwPnx5+KInoPorktaJOS7ESGAh++RH3LzxNYp9nS6XP-v9iADMS-Srt6QjQG2XcBeYQ36MvnsSAeiI709IWK+iL1a7JyIVfwo8Z-TDHh-vCn+6PH15id27ALXYX-xxED192L1eWvjFTkQm2d1+HIUNyx1h1+y2SPjfFb1eSuQt1j272DwG1uzDxALV18jhhtG2joFsxAJT2Q0x3r3KzdCoKWEGB-xB2yDRzLGh1czQJxzEmYLtEGG2XkQoGwMMkEI9EGDDFkDBFf0dF9k31nz7wHwP1CEkOoMGBQjLl2T1yQKg2UPn3sUXwsQjg0NYL1BxjqG1F2iDyUP8hUL3zIJeyqBkVAWnkjWQLr14PfGniDjcJHHEN8gCMTBELfCLA8LQwKH0JD2IJow8LULXjHngJPj7kUPY2rTgUSKJCgR2RgSyPSOfW4yyNMNGwLiLhLh0JHFgVPmGX-i8JXRqL7lKJL3bkPmgSaJnkKNr0aOKNqIjzKNJjXA3AIMIINhQMYPc3cSCNKncTX28UQJ7x90exaN53jETHcRqOgQlzKhg2mOWUwImGgPV0eEFGAhFDFAlArz1yr06FJ1lUqHiSYCuhVHOPVEuO1Eu1oK4N5AWC1AZBeLOOFHeM1CuKohANWJOKeMBNVAuNBM+N12d1uOiJ7x4ON3K2hNONhJBIuDBOsBmIeP+OeKxLeI1FxIRIK2RNAHuPoKNzm34NEiJJhNJI+Jb0SNeOBPRT21oJd1TwcKMPm0H0hOXwfhJOBn6VGOnzsi30cPmxMMQ1eVLjdDFJtEvxa0MJ33m332OJi3WL1AugUDUTVjwOsDmkZHoVaBVyIR2JS31ENJCCWWqWNOzx5TNJcAtPQnYIYGcNCA5LVDJP+N0V1DtLBBZx5JhFXj9I0FcSjPVGJzuVxUc0eKWGJNjIDLxK+JlDLF6DqxDLUTq161jNAMLS6Gg3fhVIlO52UTjGOTzPBALNeGVCBLVGLJLIKDLNFI5NVL5TbN5CVLoFqi7MrPDx9PojrLDM5G6PGO8PRPc3HI4OFMP0JStMzIUPqIyM425M5ESI+i9OAMnPXNiI5xoxIO3KiwExlSEzYC8C4F8D4DQF3xq3IKcyYDwTEERDxB2L+L2C0HdWIk-OpOzNADxGrP9g0CiDxCDkuCuD-OMAJAAgVS7QAiMB2hqgJPogIECQ-OOilNCAAEJkNXzxBsK-ok4g06t9pADE9C8vFyUe8pd4Y6ZJpHTwEqKC83FaKzRFyHjpQEYHoZVMQvyJifDMQg5eKmLCV0LOY7cJ8+ZBK6CZT58CA0ghSFTh9lzA8CAbSNTRLQB5TfNXk1YGZylrwtKFKdLlLQBtSANas9TTlspGhbZ7MaSUt7KRgMtrRaZfE1Lny584C75Es6C0ToNsUxI3Kqtsib5OVPLrxAreT9M4iO1EtRzhxdgSRXB6YTANYQVnJvl4ruML4DLh9RSCBuZzI8qaSqNCrsBV5TNC44hi5Mrsq3xXEV1tJns2o9TSrGzHdhczI6iaSNNhJeqldwxEjuqVguT+YyqcK7iljbsJqjBxqyqt5prXhZqUSa87JuNFqUq8QSkmqTKe4GUFpwgk9OJEx9kXKkgXBxB3chlshjM8ZfzXA7qzrzZthQAhqogKKyr7rCw+qclC8LrMqPqCg5gXrbqxB-rhkAAebQG6t6wJMG0AeUQScC2DPYOMEgQwIKD0idVNA0mqOYUSUAAAakAt4VQhulcDkEREd2yApoy1Jopv5WpolBcDpqiHepRrmDAuEkxs8AICMCEDsHNPCNAEJpBCoGJrEnJspvYXZtpoIHppOsZrEiDnlrZooBps5pVu5uRtHN2AOCOC5ORUazoo5iDW+GqD2ASiur+AjhCRhsBoGvLAaK4RhpRr+HlAyFtoFFysAhoHSqZDKU1mvFaX5TmEayMzxiowZv5V6Co3eqjsluwTuywgZrSG4x5qQSbkvmjW+FjpfUuoqMOvDucvLH5v+qDlIEuARlADazLSmE-WXi2FXkWtcXLMWtyqyDzqmDOmdsWqmsxBmvf3AWHpClHvWubtQTnq2usT9uNvtsQRst8kpTNrvgtsy0tuJmtqXrtt7sfStqQ2dpGverbr1iK0aITqkV9pMH9pXqDpDvLpysjqkWjoZWLvjrVsTslorWTsCUBu9q2GjvTuKLVuzpo1zsbHBgLtWiLqepLtxDLrDpBWPumGru3uDnrptEbteBjjsFRSW1nvPW9j-kJg7rKq7pKr+pFQAVGSHpWsd2npWFbKkUnv6tYaWtIfzvnrGMXofuXqPueQvKsSvJE04B8B4H4BQCfJcOulumoHuiRgpiCuEvRNelEg2i2mUYiu4q+pul0dQv6niF-LfCNLUfiqp21meVXh0buj2kE1cWgxjBS1bQy06FbSJnYd2NgznU8YKAXR8aFRSyGsCa+vbU0HLF8ZSy6Qia6RCbcbTwWBXQy1Sa4V5FibT1kHoAHX0Ay1yfyaydCbT35sCf5pidKbK1EnanED1HOHoCWTqbEAacYD+GyZqbJoic6AgrSH0EevSkUgpsMFAE6ffFEiUh6YKD6dAAGcmUUlUlGfGZgyUmhMCcUi6DSk6FUk2ZWdEkWTSGmFmfme2cUimTmYKH2eAGmdWkgrmcGeAvlkubGeqYmYAFJbmTnHnFJ3mXn9mnqenvmFni6Bm3mYM8LjMgX7nTmhnQBIW8YwXkmanYavmYWfnQB4aCgkWtgUtYbkppngWznMW8YHnwXRJUo0X+mMX0psX9nUoCWjmugiW4WGW6XyW8LbmnmtnaX4XOhPyYxPJ7GjHHH+KrEpqUoYQ3dW1c8RW9GxWQg1lhWlGTGSZ40EKgkpWOoghJkwm5XUKMsbGKYjp38HH5XJo1kark0zWTHpcUloMUsJU3YMsnWapfHeyUtIASBXZRACmjmvWfXi53W2yUsWnKhYBIBAmw2I3g2SzQ3lBWmABRCJsNxN2NwtFLAAOUUEzduezczZAakSFetf1fumlwleSi1YSjIEmQMy5BtbLZv1nGLYYAxgbcTHLZCklb4Q6hre2Z9xNcMZVcbdbYB0tZWwuiunbYVdJFeiCi6R2Omn6mfGdiYEug5sqFVUUDMCwRugarAXZmnc2hBFEMscOnHvpEZAXb+nQzItPtimODQZYh2JphYVfpYmYVVOnZJl6uzXYWnfLazr-bpE-f6W-eXPVcoEaV7LLAA6bdOxGHgWA5zTdRQYaquifaOLQVqtQ5cF2HOFREw+SFcWbVNqI-fE8g6reXMJoI+Cag6C8J1rfMRGREzTvho+kKKFkKVChTNA+rIlckcvdE0NPx0Ibyuz4lAfxlWEoKEMsN5hsPkJLC4uw+TVYCumVOuVcS5lLhgyY6hl6F4H+AwE0ktRTg45+o04HPBWztQ-qsavI60iAA","body":"function eval_conditional(component, env) {\t\n  return is_truthy(actual_value(conditional_predicate(component), env))\n         ? evaluate(conditional_consequent(component), env)\n         : evaluate(conditional_alternative(component), env);\n} "}]},{"tag":"TEXT","id":"#p9","child":[{"body":"\n    Finally, we must change the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"driver_loop"},{"body":"function\n    (section ","tag":"#text"},{"tag":"REF","body":"4.1.4","href":"/sicpjs/4.1.4"},{"body":") to use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    instead of\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":",\n      \n    so that if a delayed value is propagated back to the\n    \n\tread-evaluate-print loop,\n      \n    it will be forced before being printed.\n    We also change the prompts to indicate that\n    this is the lazy evaluator:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":6,"eval":true,"prependLength":541,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKLu-XfgOmaJi8e436Hsd90LX4AnchrrebczC2D5qikzaKCz4sWbKKDt0AAMLnNl-w5wf0ek0fq3sfZ3tgKbystgMf2GGGdPW3tg+cV0M2WfaQlmwGzaxfp3ZkCf+AvAQAA","body":"const input_prompt = \"L-evaluate input: \";\nconst output_prompt = \"L-evaluate value: \";\n\nfunction driver_loop(env) {\n  const input = user_read(input_prompt);\n  if (is_null(input)) {\n      display(\"evaluator terminated\");\n  } else {\n      const program = parse(input);\n      const locals = scan_out_declarations(program);\n      const unassigneds = list_of_unassigned(locals);\n      const program_env = extend_environment(locals, unassigneds, env);\n      const output = actual_value(program, program_env);\n      user_print(output_prompt, output);\n      return driver_loop(program_env);\n  }\n} "}]},{"tag":"TEXT","id":"#p10","child":[{"body":"\n    With these changes made, we can start the evaluator and test it.  The\n    successful evaluation of the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"try_me"},{"body":"\n    expression\n    discussed in section ","tag":"#text"},{"tag":"REF","body":"4.2.1","href":"/sicpjs/4.2.1"},{"body":" indicates\n    that the interpreter is performing lazy evaluation:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":7,"eval":true,"prependLength":561,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKLu-XfgOmaJi8e436Hsd90LX4AnchrrebczC2D5qikzaKCz4sWbKKDt0AAMLnNl-w5wf0ek0fq3sfZ3tgKbystgMf2GGGdPW3tg+cV0M2WfaQlmwGzaxfp3ZkCf+AvAQAA","body":"const the_global_environment = setup_environment();\ndriver_loop(the_global_environment); "},{"tag":"SNIPPET","latex":false,"id":8,"eval":false,"body":"function try_me(a, b) {\n    return a === 0 ? 1 : b;\t\n}","output":"L-evaluate value:\nundefined"},{"tag":"SNIPPET","latex":false,"id":9,"eval":false,"body":"      try_me(0, head(null));","output":"L-evaluate value:\n1"}]},{"tag":"SUBHEADING","id":"#h2","child":[{"body":"Representing thunks","tag":"#text"}]},{"tag":"TEXT","id":"#p11","child":[{"body":"\n    Our evaluator must arrange to create thunks when\n    functions\n    are applied to arguments and to force these thunks later.  A thunk must\n    package an expression together with the environment, so that the argument\n    can be produced later. To force the thunk, we simply extract the expression\n    and environment from the thunk and evaluate the expression in the\n    environment. We use\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    rather than\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    so that in case the value of the expression is itself a thunk, we will force\n    that, and so on, until we reach something that is not a thunk:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":10,"eval":false,"body":"function force_it(obj) {\t\n    return is_thunk(obj)\n           ? actual_value(thunk_exp(obj), thunk_env(obj))\n           : obj;\n}"}]},{"tag":"TEXT","id":"#p12","child":[{"body":"\n    One easy way to package an expression with an environment is to make a list\n    containing the expression and the environment. Thus, we create a thunk as\n    follows:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":11,"eval":true,"prependLength":509,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTrgcDaq1AsHYFAbw3B0D8ACNS3yCak0poqIygxaRxCJinC4QjxiMznuEjk0AAAyBToBT03hSslPGYmkKJuKRHBYNReYZ27FJ+NVQJPJtqqmqpokDNCi0Lm4qrbbMDElfJnIXQYo0dU4BnJVKI6YsTM5hoNwTM0dTTZ-o5hIXfrMn51tCwlgrDU+i0z2mBOWaEyJUSiWjAObnoZALLwkuGtC3FcLOXosld062w1FUcvJc83Fbz57sltLi4G+i+qWJucawbMziaLPVEy9ZrrrQ8sR1G+hM1PXqNNarWei9zWL2+ebY5jrk22F2qJQ6rVxnflefm1EQDPm2vtaeQsG1DXZt9bS4NqzImxLo2BuVG1GlQAAB93vPX43d4bD3RJmBuooVciZXvZE+99-r6WhuoSyyTMH1WOs2vFXKmb5bNm1bFvVpbrXtVHQeRHZH1ttsRn5W0-bc2t3HZa7Es7BX4yJie+hS7OW0jE5ZDtugpW7LhaZy9oZwS6DRdZzF7K9rSeHUR+d1+QYQwk8dVd9HNGfuCdh9ZyscuOcS-G055YaYQxc2zLmQ1+i8cU7sv8zHzwRc49p7PCOGvmk1kVxsg7VOacnbx6t-LvlCuO-l6SQ3PM6gLVGeb0I4X-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-XMYKH-SscFXC3OvsdAHOqcZMdmNSTcdSU8bLNmIS3cWiyCcKV5Gsa6HC1kHoCfX0Gi2idifCecdmMpvscpvLAic6HC3anED1HOHoEhRybEDycYD+EyYKHC0Rrcc6BfNAH0D2vSkUmRsMFAHKeMqUmqYKFqfqaBUUlUhabafCyUk+PscUi6DSk6FUjGcGdmIhTSGmG6YadAEUmBTqYKBmdh1EmAE6dWjxDSB6YmcUjAAGeSc2YAFIdnFnenQAzm1nWnTn3xRJ9rqmrnDnY76mHn9TIKNMXm9m6mlnFJvm8YPmvHNn3rLm-mDnGnQBPqCgQWAmwXkpOnXnoX3q8Z-nPnRJUoIX9mAXQB0o4WNnHnUokX5mugUXln8X0X4XphwtIKdnKXxmCXQBoKChTyYxPJdGbpBH9GSYTcUoYR-lT00g9HhHmNOXOl3HuWZGDGMl8NvzelBWOogggUXHpXFHotbdtY2mpXbpFHZWdTCquW9X9G+c5lU1wtfU3ZosrWaodXqzjLIASBXZRA4n5mnWXXD57XqzsnlBinYBIB7GinKgA3vXSzfXcmABRNx4NyNsN5M8LAAOUUETZ2eTcTcfrOQlYYAxlFcZ06WexaoFa6H+TICBVUzIC5DzYP2e1hWNZ5fuj50GuLc6FLfLc0eySOhFfVdNYLdnE8gHvOgRGuhNbFZoteiClSV1Omn6mfGdiYEuiJsqCjUUDMDURunSNZiFmreUffLfDUYpnIc6EnaE1Aw8y0qeXXSOGAfCt1JpkcRvZYgcQ5Orb5c9qPerOrabZDunTpGfY+VffH3lcoGuQdfLC-b7c2wao-ZcUyqAeTqWKUQyvjpcF2DusGAQ+SHQSveOEw-fAHcJ29gln6nfEGmqVQzGtUsecbWizI7Sr0zM33Q3DIxGo6so5gusNBPwyDho8aqXQJCOyY91Nt0bW93zSY5CsE9LQ0YnIAw9yE+93SsldYCukJBoBcG5nQS5iXn1N4D+nc1gqMD+kXz+h0lzQ5RU+unU+5lE3jqyqToUpAdvSAA","body":"function delay_it(exp, env) {\t\n    return list(\"thunk\", exp, env);\n}\nfunction is_thunk(obj) {    \n    return is_tagged_list(obj, \"thunk\");\n}\nfunction thunk_exp(thunk) {\n    return head(tail(thunk));\n}\nfunction thunk_env(thunk) {\n    return head(tail(tail(thunk)));\n} "}]},{"tag":"TEXT","id":"#p13","child":[{"body":"\n    Actually, what we want for our interpreter is not quite this, but\n    rather thunks that have been memoized.\n    \n    When a thunk is forced, we will turn it into an evaluated thunk by replacing\n    the stored expression with its value and changing the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"thunk"},{"body":" tag so that it can be recognized as\n    already evaluated.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-4","body":"4","href":"/sicpjs/4.2.2#footnote-4"},{"tag":"SNIPPET","latex":false,"id":12,"eval":true,"prependLength":500,"program":"chap=4&prgrm=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-fVdro1QUEPFbPCFP+R9-r3vhlT+j3D8vGXVvm9e51-fqpjucdjuf1RHMF5knk10MRvwu2-z139wn3exMWXhHEkXXig2MVb2y2EzPiDgiRHGP0MmwMTCRWiQkTPjzQKF+DOlHyQLaEf18hYUPy-ikR+QgOJyoNhXQzHSJDEWRWIMYJQM2TiwgX-0nz3gPiPgQNuF4N9lQIKSwkENHWEOqDfnoPfAgSkKfSqBkICwgVgP50aWjwYxbyl0X3fw+CDkaVwN8kaWaRrH0IoPWzJzIyEKk3jETD0MILfHO0LSY3MKhW7wmD52SyqBVGAhFDFAlCSU8zF06E93okmSYCumCOFHVDCO1GWwsy315AWC1AZASMFBCOSM1HCJF05CcP5ziNyNVFCMKNSKdWvyiLIL+0MMB2MJE3KMeDyKSI1AuCKOsAsMCNJnCPiPaMqIKO6JqO03qIwUaPKHa3QKX1l1EmyKGMSLVC6OyJCD6NCBWJFDNSH2Hy-zv2gO6wN1KNKjoMSJtFsMgMON926z-3kLwIAjoFqguN-WvxiO9yONlwDwCLahcL1Aukv3BDVgH2sDmkZBsTc1zwYE8MY0U31CBN6PdT+BBOe0dXBJcEhPQmhLYOM1Km2NGPWJ1DDwRLBEi05BZU6VAAJPQQJKGxvCVXUMqDaLpJSIiLaUsTjCxVJKSWky0wJMpnJTpBjXOI6MuK23iS5MTB5PBD5NeGVA6LVEFKFK2BFNoWGPqHFNJRdSFiXjdA1OBjeMM0S1AwBJBERLSI-32KLWaN3xqxlN6JoLOPl2hOjzsJ8wcONNOKmkZHXz0TdN0w9NJyx2r2KS3TVR3TYC8C4F8D4DQD9zxJmKQgLiLiiDxFhJb0uCuF7WInTKmPAjxElP9g0DTLML2C0BzKTUFEoBqjSCKBHB2hqk2PogIB6URDzJyAMNCAAEIi0UyxB2ytJPZEypSBd54ohzdudQAdlqkPjFNpQEYxyNjkSthJy+YecWlFUHj+cFy6YkYMykyjDd8CA8t4Y9y1VmzOZi8udS8CADy3p78TzQATjtznTBcCc7ztcbjMQ0h7j2Cnk1YGZDlrxPzkcDjypHy0gfiKdnCsUcVspW5aZwC5z7NRJ4KRhE1rQkKnSkz0Log6N59ZjpdaMzJO9KEy5my8KbYkKSLsp7zKC6MdCylyBdgSRXBJ0NYGVnJmUwL3BptSF-zDI6CCBuZzIeKYj-MBLsBEFb1cRRCOLgLkh0EZDtIks-isURL5SEcjsvp7zMxGYAUYUdKRhcSjdRKht+ZRLSCGjP81tF1NKVgcLmBXgy5LLXhrL8zrS4sHKjAmKF48Q9kFLNZwEvlCwdLGdOJExdVpjtAkgXBxBDLvlsh-08YKzXAErwhCpOT9LhJpMfLEqwrHsekuRzhIrJ1zYmxYr0qxACqfkAAeKq+KmqzKiqvsASAOONPYOMEgQwIKLEjeUAegI4c0mqOYUSUAAAak8pcVQhulcDkERAR2yCmsTXGqmotVmolBcAWtop-iLMEhLM6s8AICMCEDsAhLfEYCGsBNGrEkmumt1Pzi2p2qWvutWvuo2qevmoIERBar8u0D2EOGOA02oUNQihhGTgyGqD2ASmipekbX6VqvCvoz+GkPcVqtarpHlCht2AFG4sAhoDYqZAOWCpZnuQtTmENRSgA38yWotV6H8xaopsGvUS0NCuIT4pXT+rkQfjIRhm4pMGprxlkv3jiEPiCoZRRq2GLOEjBrElIEuARlADE3rT+C4ShhqT+EQR8vQWEtEoFvWTpDOkRp8ossxCspXPZlNpCnNvcsNsUQdtsu+GhrxqkrUrsC4iG0lTlvCHBq6EhpMBdthvEpRIRtZu0qKrWXgSviZM0LprOWxsDtxuDoJqJolpYnJrOUptCqFrso+XjrCV6CXnKkZp6R0sxotBZuBjZqyQ5ri25sbHBj5tWm+FzpFvkpJslujumBloKqDgVs0RtGVteBjg9ulSP3tvkVgQ1sJm1tEt1vVPys9V4U2RNvMoR1tscstqJmtrMjcscsnt5sdutOduToNrDLAG3WYCjP3RjJ4H4BQBHPWhui2moHuiRgpkIrQOItelEg2lfsbObP-rukTE2hBCIKSWRlW0oO1mKUQWAbfr2gjPQRjRjCYx-UTU6B-SJmVIrEU180wYKF8xwcFSYxysIdABypIbQcU1SQodSWodVMUy43cUTRYcKV5Fwa6CY1kHoBBAlkTV4f4cMDpC4c6CYxlsIZlvLDEYKCY3anED1HOHoEhQUbECUcYD+FkbKljQmooc6FLNAH0GSvSkUimpEe0aYyUn0YKEMeMaBUUlUgsdIcUyUnKMIcUi6DSk6FUk8cscUwhTSGmDsZMdAEUmBSMYKH8dQuABsdWjxDSHse8cUjAGcZodQoAFI4mQmHHQAMnInQBon3xRIUr9Gcnknc7jGXHULuz-0ymEmjHQnFJam8Yqn0nim6rsmGmknTHQAGqCg2mmHUK6rkobHynemRmBminY1UounEmmnQB0opnqninUpRmgmuhxmwnFm8ZGmVnY1uy4ntmvGlnQBeyCh0yYxPJ4GX6QGlycQEcUoYR-kf0OdbnEH7nVBrmqSEHGzPmNEc0AIBrkpnmOogggUyH3nAG0gYGKYjp3Vfn36IzPJpKfmoX7ors5kY0mNfU3ZE1cWaptGVTxHFNIASBXZRB9BMGyWKXD4iXiWdHRI1HKhYBIBCHmXWX6XiX5HlB1GABRCh5lvlrllUpjAAOUUDFbiYlbFYrtuW+YYAxkRcTCuwsqea6H+TICBX8zIC5GVfDzQnPm0hudug+dVZCnVc6E1e1fsKx3hcofRZVfj1nBRZcwuiun1Y-pIAxNSXvOmn6mfGdiYEui2sqGzUUDMDURujFuT3Zn1bAYrLfEgYpm3s6CCl9b+nzSTgRtimOE7pYnvJpkcXTuvAcUuM9fl20p1JcX1dVaWtTa8TLY+QrcFyrWzSBeuQZfLFredbYT3pFbOXbrFqunzf8KURkp7UqBcF2FKsGFHaUr6VzZLZZldc4z3itTLXbSzVzS-qPJjTbaDiwVqnbWbPbUlSPaQhnXottawgvfXW9PsiYEckrRzXo3IWsxnW3cYS1qpPtnQRLlRGoWramDPYsi-YbaJlA4yC-cPsGuKEqH8wPbEjvZnVVvCXg8oLba5HtiHPljACKH4ZHCrNABEHEHmAGpuEbGLoB2DKwiw7SBkNw4KC3Q0FLQxlIBaBqhqm5D-k2Xtk0kjQfmnp3hflxA3ePc-aw6lq8pnUlSw+gXVu7q7OpJzQU-HapNYA9ZYBcG5nQS5iXljV4D+k7PzhGD+j9z+h0nrQ5U0+uhoB0+WDSCHfFvnbaE0iAA","body":"function is_evaluated_thunk(obj) {\n    return is_tagged_list(obj, \"evaluated_thunk\");\n}\nfunction thunk_value(evaluated_thunk) {\n    return head(tail(evaluated_thunk));\n}\nfunction force_it(obj) {\n    if (is_thunk(obj)) {\n        const result = actual_value(\n                           thunk_exp(obj),\n                           thunk_env(obj));\n        set_head(obj, \"evaluated_thunk\");\n        set_head(tail(obj), result);  // replace exp with its value\n        set_tail(tail(obj), null);    // forget unneeded env\n        return result;\t\n    } else if (is_evaluated_thunk(obj)) {\n        return thunk_value(obj);\n    } else {\n        return obj;\n    }\n} "},{"body":"\n    Notice that the same\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"delay_it"},{"body":"function\n    works both with and\n    without memoization.","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.25","id":"#ex-4.25","child":[{"body":"\n  Suppose we type in the following\n  \n      declarations\n    \n  to the lazy evaluator:\n  ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":13,"eval":true,"prependLength":561,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKK4Du-XfgOmaJi8e436Hsd90LX4AnchrrebczC2CoUYyOCkC4ygAAAMf0OWHyGFzWqfgneMBfGMgtvAf0Z0eIf0ekMfq3cfZ3GC+AKbystgsf2GGGdPW3tgiCuteMVAHyffUQvAGfzaNfp3ZkcwtgTfuAo-cfH3ifAMmiyQ2kM-bfgNIw8-YAZNRIzQS8qU0-YArfEQOY8fhcG-b6y-B-tfq-Z3tgW-4YO-Rge-LfV-R-7fCfXfi-FAF-oAh-rka-RgZ-O-q01UCP8gAA","body":"let count = 0;\nfunction id(x) {\n    count = count + 1;\n    return x;\n} "},{"body":"\n  Give the missing values in the following sequence of interactions, and explain\n  your answers.","tag":"#text"},{"tag":"FOOTNOTE_REF","id":"#footnote-link-5","body":"5","href":"/sicpjs/4.2.2#footnote-5"},{"tag":"SNIPPET","latex":false,"id":14,"eval":true,"prependLength":561,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKLu-XfgOmaJi8e436Hsd90LX4AnchrrebczC2CoUYyOCkC4ygAAAMf0OWHyGFzWKfgneM+fGMgtvAf0Z0eIf0ek0fq3sfZ3GC+AKbystgMf2GGGdPW3tgiCuteMVAHyvfUQvA6fza1fp3ZkcwtgjfuAI-sfH3CfAMmiyQ2k0-rfgNIwc-YAZNRIzQS8qUU-YALfEQOYcfhc6-b6S-+-NfK-Z3tgm-4Y2-Rgu-zfl-h-bf8fnfC-FA5-oAB-rkq-Rgp-t-VpqoAf5AA","body":"const w = id(id(10)); "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \ncount;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \nw;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n    \ncount;\n    \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n    "}]},{"tag":"EXERCISE","title":"Exercise 4.26","id":"#ex-4.26","child":[{"body":"\n\tThe function\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    uses\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n    rather than\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    to evaluate the\n    function expression\n    before passing it to\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":", in order to force the value of the\n    function expression.\n    Give an example that demonstrates the need for this forcing.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.27","id":"#ex-4.27","child":[{"body":"\n    Exhibit a program that you would expect to run much more slowly without\n    memoization than with memoization.  Also, consider the following\n    interaction, where the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"id"},{"body":"function\n    is defined as in exercise ","tag":"#text"},{"tag":"REF","body":"4.25","href":"/sicpjs/4.2.2#ex-4.25"},{"body":" and\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"count"},{"body":" starts at 0:\n    ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":15,"eval":true,"prependLength":561,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss1lRVQVotlRbzR5ml0vgZBiIorg1R0OnGIWRjzAQq1WmspC1ftQRHUtUwoRQoBEkQWgY8lalQc95YFJNlTVjNpDUoTRP4jmNq4hkVAsNxyRRFTROdCTmb1CsOZMEWyOluz7M1P5TyVYo1W1fNSL1UNoAA0DIPSGzZYk98jN0CxyNHdpp2xXZCytZ9GJYzjX7TL0Rs3BqyTXqbPZE3MCNGPILTSLroDg0YkOo10dRCQdaTiSQknSaEk3uPogrKap00aR7enjRH7E2+6dCetRyRNR0Z0LBQTBEOIiLIiZxurDa23p4MYayGCXach5vZka5jQV3agwoWOPGgfWi69nMLlKm6ldLBxON1Nqu3YWaY3ebBoQp-QXedlEqGsBQC2Lr70Ow1URjxBQV1L0OK9rxvKMnVsZ3O67NUewUXs+yta0Bpx5WoVeLNn4Vx2Nmdg9QXkHzd+U5XzXm-tSRc99PYQyXtvLo6NCCM38mfMuKVQCEwAdEIBKDQH73ARQdehUUhQMbM-Q2+tnw3ExMgkB68y4X0JmdHBdDyo3GgV0R+cDL68n-gOY+45ogq0xuGEBn8N6r0IefEhVIOGdD0pwryE1HqlXoEoZ8NBC4YUApRawc4e5tG3rnKoAjhz10dM9OEDgiCsGxkqeESRpCCyFlsEg2MtDOJcVMdqCU1HA0eFoiiwE9GeK8VsUxnYXz4NnDeI6z1mxBKIqxcCIt3yJJCHme4WF5xxLLHMNxWgtCz2UT5UqKc9wHl4otHhoBEFk3QRU-YpMZC1gMZ5BBqgMZrnMIwPGfiNGBMwro9kZN2mdEQaQTiJImI1V6W9MWkyuI1SiN0wsYzCiUPxtEMm+Vaa1XVkzFiqzwrCLCWWRZ0y3YLVOWcuki4iolPnvM54FyqAzOkKvfMVxCpGM2T4z5WTupiQAFSvPecC0SaQ7gFlGko5OA4jYfzASzKpW8alnXagmSoVszLOWGEqI2FlWSRjaaE251MqQPMeYZFOUy3nM3fKiqk29EE3HQVgpEXE3xl1DMSo0OSyXktIV0OlTFMkFjLpyy53LoVXGnjcT80CzrsLhSoheA50kkszkeNFHRRXPllVlDEmq4KGunjcv2+KoImqoWZXl4Y2TEQFRa8si5BVC2FSI88oQb4Sjvqq0p5Q95WpqkhMQEllTnAAFa-xapsvOigXAuFDakyNUag5YNquICS8cvIR2zSHSVmaw0SVjZ0M6YgjCKA+VOKgWFi0Fv2DrPNar7JMEcu+Gg0ay3LRhi-EtIc02ML+Ig+26CS6omoS6rYjbQxDvdWc2d3wh3rKmEvcqlbq1pozSGrN4aQ65r+Ouyom6a2KDrfOkR9BsZtD+vLMARQQT2ChhZUAIhxDzA3qAG4jZj21qwv+y9BStBaS6PgdQjJiigFIC0GqNVuR-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKLu-XfgOmaJi8e436Hsd90LX4AnchrrebczC2CoUYyOCkC4ygAAAMf0OWHyGFzWKfgneM+fGMgtvAf0Z0eIf0ek0fq3sfZ3GC+AKbystgMf2GGGdPW3tgEc9A7YDI0QuftpoQ-z0LlfzfNfrfgNIwcwtgjfuA1fa3H3Cf+A3flgRQa0HyvA6fzac-tfZki-YAZNRIzQS8qUs-YALfEQOYcfhce-9hqf2k2-4-Z3tgB-4YR-RgqUQAA","body":"function square(x) {\n    return x * x;\n} "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n      \nsquare(id(10));\n      \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n      "},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nL-evaluate input:\n      \ncount;\n          \nL-evaluate value:\n$\\langle{}$response$\\rangle$\n      "},{"body":"\n    Give the responses both when the evaluator memoizes and when it does not.\n    ","tag":"#text"}]},{"tag":"EXERCISE","title":"Exercise 4.28","id":"#ex-4.28","child":[{"body":"\n\tCy D. Fect, a reformed C programmer, is worried that some side effects\n\tmay never take place, because the lazy evaluator doesn't force the\n\tstatements in a sequence.\n\tSince the value of a statement in a sequence\n\tmay not be used (the statement may be there only for\n\tits effect, such as assigning to a variable or printing), there may be\n\tno subsequent use of this value (e.g., as an argument to a primitive\n\tfunction) that will cause it to be forced.\n\tCy thus thinks that when\n\tevaluating sequences, we must force all statements in the sequence.\n\tHe proposes to modify\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate_sequence"},{"body":"\n\tfrom section ","tag":"#text"},{"tag":"REF","body":"4.1.1","href":"/sicpjs/4.1.1"},{"body":" to use\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"actual_value"},{"body":"\n\trather than\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":":\n      ","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":16,"eval":false,"body":"function eval_sequence(stmts, env) {\n    if (is_empty_sequence(stmts)) {\n        return undefined;\n    } else if (is_last_statement(stmts)) {\n        return actual_value(first_statement(stmts),env);\n    } else {\n        const first_stmt_value = \n            actual_value(first_statement(stmts),env);\n        if (is_return_value(first_stmt_value)) {\n            return first_stmt_value;\n        } else {\n            return eval_sequence(\n                rest_statements(stmts),env);\n        }\n    }\n}"},{"tag":"OL","child":[{"tag":"LI","child":[{"body":"\n\tBen Bitdiddle thinks Cy is wrong. He shows Cy the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"function\n\tdescribed in exercise ","tag":"#text"},{"tag":"REF","body":"2.23","href":"/sicpjs/2.2.1#ex-2.23"},{"body":",\twhich gives an\n\timportant example of a sequence with side effects:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":17,"eval":true,"prependLength":561,"program":"chap=4&prgrm=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-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOexKLu-XfgOmaJi8e436Hsd90LX4AnchrrebczC2ARwQa4j2DU2vS1CsA9E7z9obEZ8-zNbXw2gux+ruwwKI+UaECkCRe3Z586xtop+Ay3uAa188UwKSbR+rex9ne2ApvKwykYId9rcfcJ-gYihVqN+KTPMo-cVpCpoACsAA7EFRgLwGkAABxr-Nr4CL+2CwEr+2Ab+2Ax-YZQzd-4C99AA","body":"function for_each(fun, items) {\n    if (is_null(items)){\n        return \"done\";\n    } else {\n        fun(head(items));\n        for_each(fun, tail(items));\n    }\n} "},{"body":"\n\tHe claims that the evaluator in the text (with the original\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":")\n\t  \n\thandles this correctly:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":18,"eval":false,"body":"for_each(display, list(57, 321, 88));","output":"57\n321\n88\nL-evaluate value:\n\"done\""},{"body":"\n\tExplain why Ben is right about the behavior of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":".\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tCy agrees that Ben is right about the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"for_each"},{"body":"\n\texample, but says that that's not the kind of program he\n\twas thinking about when he proposed his change to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":".\n\t  \n\tHe\n\tdeclares\n\tthe following two\n\tfunctions\n\tin the lazy evaluator:\n\t","tag":"#text"},{"tag":"SNIPPET","latex":false,"id":19,"eval":true,"prependLength":561,"program":"chap=4&prgrm=PTAEGUEkGEAVQFLlAFgHQCZMChslAGYCuAdgMYAuAlgPYkDOhATjQLYQzxKpoCMfeMAHcqFABahWNACZUCVMgENqdRgRpNQAG0UAvAJ6gApgDdFWostolBoRWTIbZJAOagKNDnETJ0WDLjE5CokxmYWykYAFI6sAA50RiQUADTGJCYAlKAA3tigBUxGFERMoVT0APpaokZM5jFsCSRJFJn5BZ1dAPzatfValeFE0bHNre1dU6AAXKAVlSSKrKNNicmT0529WjQ0ANZEcZX0+qwARjSDw9GnF1eVNASLy6vx621pSVkdW7PzVUUcTiNSUIUa7xaG1+W16QJB+ii9hK5iG5hGUSClGslSMAA84kV6PRrBDxhsvhlMikYX9poomC5cQSiSTVGSPtT0j86f8FjQ4nVlBpKrFzlQluCxpzaVNeqZ0ZEogKhR4mKK2OLJTiPJV4aCrHQOVDPtzNn85gtHCRZCEGtKTebYWFUdbbdZ7WsTZSeXTLVUdBdpIpmYSjMTSQ6JrKepJFPsjJUseDA+dg5U4gzXhQ6iczpctPRjRMabyy1NU+nLtJEVGKWaY51-ScjABHEbkN7ktqNgry8It9tJMi3NsdkcnCiRFbJIt103fJ3TZvnXZkfbF6G8-uo1c0deb1IN3nNoolMqT6etQ9LuUuwZn0okS85mcUQ8+29dZvJnHSIxkDo9RSl60bbvelg5pipDYnQlT-oBlS6ta9BTsk8EAVoN6fr2fJVAhQGGiQN64TugwEVmIGQq0OEngCeoRi4JBviR4EKoMiiMcx17zrRfrGEwLBMB+oAAESkPsJA0EIoSnMkih4qAAC0SkQZEomZAA3NgAC+gQwSEdiUJY1zotE+JxJ+uQwo+ZSEBoE6iFE7GQeZBKflpun6cE1h9KhjzPAyTI3EWFn0FZOQAJA2cUT5xnEzkEqAAC8AB8RkoqZFhuZZZpfAS9CeXpv50H5FABRhOj6EY0h6oyoUFRF0VdLZoSsECiVxCl6X-lVlRORZn75XEhXaXp2AlaE+qIkEaRBeFZrWQUcigFECyElQrCiFQJiJpN0EkJk2R5NMrV2MCWj6BmTCbdtu1JgZpK4Vss1lRVQVotlRbzR5ml0vgZBiIorg1R0OnGIWRjzAQq1WmspC1ftQRHUtUwoRQoBEkQWgY8lalQc95YFJNlTVjNpDUoTRP4jmNq4hkVAsNxyRRFTROdCTmb1CsOZMEWyOluz7M1P5TyVYo1W1fNSL1UNoAA0DIPSGzZYk98jN0CxyNHdpp2xXZCytZ9GJYzjX7TL0Rs3BqyTXqbPZE3MCNGPILTSLroDg0YkOo10dRCQdaTiSQknSaEk3uPogrKap00aR7enjRH7E2+6dCetRyRNR0Z0LBQTBEOIiLIiZxurDa23p4MYayGCXach5vZka5jQV3agwoWOPGgfWi69nMLlKm6ldLBxON1Nqu3YWaY3ebBoQp-QXedlEqGsBQC2Lr70Ow1URjxBQV1L0OK9rxvKMnVsZ3O67NUewUXs+yta0Bpx5WoVeLNn4Vx2Nmdg9QXkHzd+U5XzXm-tSRc99PYQyXtvLo6NCCM38mfMuKVQCEwAdEIBKDQH73ARQdehUUhQMbM-Q2+tnw3ExMgkB68y4X0JmdHBdDyo3GgV0R+cDL68n-gOY+45ogq0xuGEBn8N6r0IefEhVIOGdD0pwryE1HqlXoEoZ8NBC4YUApRawc4e5tG3rnKoAjhz10dM9OEDgiCsGxkqeESRpCCyFlsEg2MtDOJcVMdqCU1HA0eFoiiwE9GeK8VsUxnYXz4NnDeI6z1mxBKIqxcCIt3yJJCHme4WF5xxLLHMNxWgtCz2UT5UqKc9wHl4otHhoBEFk3QRU-YpMZC1gMZ5BBqgMZrnMIwPGfiNGBMwro9kZN2mdEQaQTiJImI1V6W9MWkyuI1SiN0wsYzCiUPxtEMm+Vaa1XVkzFiqzwrCLCWWRZ0y3YLVOWcuki4iolPnvM54FyqAzOkKvfMVxCpGM2T4z5WTupiQAFSvPecC0SaQ7gFlGko5OA4jYfzASzKpW8alnXagmSoVszLOWGEqI2FlWSRjaaE251MqQPMeYZFOUy3nM3fKiqk29EE3HQVgpEXE3xl1DMSo0OSyXktIV0OlTFMkFjLpyy53LoVXGnjcT80CzrsLhSoheA50kkszkeNFHRRXPllVlDEmq4KGunjcv2+KoImqoWZXl4Y2TEQFRa8si5BVC2FSI88oQb4Sjvqq0p5Q95WpqkhMQEllTnAAFa-xapsvOigXAuFDakyNUag5YNquICS8cvIR2zSHSVmaw0SVjZ0M6YgjCKA+VOKgWFi0Fv2DrPNar7JMEcu+Gg0ay3LRhi-EtIc02ML+Ig+26CS6omoS6rYjbQxDvdWc2d3wh3rKmEvcqlbq1pozSGrN4aQ65r+Ouyom6a2KDrfOkR9BsZtD+vLMARQQT2ChhZUAIhxDzA3qAG4jZj21qwv+y9BStBaS6PgdQjJiigFIC0GqNVuR-02fbTSzV5GwKhuQ4Niocx7ojV2mNPaphnVndQ-Dq6uFQxqXG71oB8PQMTnPQyvUJb9XfINapqGNk0dTaJRtkLjDuRni2wN9FG1DtyF0GKNGE1JpTRUTt0ag58Yefm-dTSLJREbYRitVaz0Xq0yp1tS6MiabU9pzZp7NPnoA9Z0zpbm3jXA2qtQLB2BQG8NwdA-AAjUt8jJ5NtVU1VPEImKcLhzPSaqJmRmN5QAADI4ugEszklKyU8YhaQom4pEcFg1F5hnbsEW4r+bk6hESok8tCi0Lm4qrbKsDElSlnIknqNxUs4BnJVKI6YsTPVhoNwit2R4316raQBvZdbQsJYKxYvovjVUMLAXqjyfK9NowNXGO+R6y8GbhrBuhB42t-je2JsicNRVNbs2pNtd01Zi9nXTtPIWPqliTXrsGwW4mpbQWDFBxe60DbEd-voTNW91rdl2u2ch-dtpR1DMieB2wu1RKHVasK78mj0ObMw+1XDx7hkFg2qu+DoNmXZOBZW1U0S6NgblRtRpUAAAfRnz0SsU7K1TswN1FCrkTPT7IzPWeffJ8tjnv2xIk35-j3yNrxVyrB+WzZ52xaXax7E+HTzZfWxRxGflbSMc3a3YBjrsOuutu2zT9CRO1tjeRyyVHdB9tlSiNTzptPtGERCPxm3367dhl14daXpVcvLDTCGHXjrieK8i2T77lPxcVdD+mCP1hAd1aTyGLm2ZcyGv0bjg3dl-nK+eD7tXnWNeGUrCGMmUeuOG709j7Jpug9tXjL1jP9qA9RCzzzOoC1RkF4OytxPQZw-24D-xnvxQ+9pFGS3+ikuhnBL1-nqKLXo-FeF3HsX2qg6L50cvkgaeRP789ziS7Cu69Dfk9il2IleAV98qf4Zz4p+8zz+jub3Gb9FAICJDAj+pUz+h+zSNYteXqcUqSt+f+VSAAzIAeHGqh7khDQDbB-FbphOARim3mgWhHTkvkkirMAURDtuYiWCrNtlXp3pHhasQRkm-n3thLQUgbLjXuXvPhQt6lEq9vrjwsYrHqVoygnoingm+Mfk8oSuPpHpfjpkbrZg9gGk9lUMPO3FgfNgIezkIbvmJCoR6IMCnnQAzoLmWGzqLlod2EHLoVXNwQDggbUnQGnKPNdDVAoEPLwb8GdFAb-vfnYVYU4Z3CfOYZyL7J4T-nflUgAbPBHH4aiOYLzJPGQRsCEZsl4eEeLvARwSYsvCOJIuvD2vwYtoIbkUeKJBEiOOIYZGUYmEitEhImfMdJ0B4RZrdoBvUXYSwjYV-FIj8nwc0VuhAlEa2kSGIsinUd0fkZsq0eMYMSJgsPvHEIfIOIIsUT0U0THsBisXYSHrguIpsckese4ndlhBAmbrMVUI0moTHoUZoeVo0hUb5I0qAa0qvu9qEGXrDjMU8tthcTUW+E7jxncVCqIRMJkY8IKMBCKGKBKEkk1pFOvlfqTpMkwFdCqBCeqFCdqCvujsYbyAsFqAyCieCcKOiZqNCVRIVp8QTlUEiYSaqJCaSZiU6rwXCY0STqJl9kUVTjSWCXSSSRcGSanlsecdCciTyWiRqPyYybNiyQUK8eySLj9toaJPiaKaicSRKfiV7nYWqWqHLk3i8WyakTAeLg-pSU-rQmKcDB8pfhAdfv5N4REXYUvG6JaTaJcZAWEcadoRkYoYZNtvqK4eCGrFIdYHNIyDYq0NQXov8cPgGWCKngui9EgQYSQGGS4BGehCmbCknK2jqfSZKSQbqHGTCe4R0gwBjHmZoHjJWXqTeEquodyTWRiSWbjpYnGFisWeCNtpdpWZTOSnSKmh0WqW6eXvEu2YmJ2aSN2a8MqESWqH2f2VsIORacOdaaStOuzM6Q4a6Wubjg5ptsHoCBdIGWjsEb0VcRyTcVTpOYYe0cmSGViWeWsfXkcbEmaaVB9FmbXrIQ3q+ewUok5oGi5mwF4FwL4HwGgLAQeaTvnIXGIIiHiE7niXsFoFWsRIhRgmWL0HiGOf7BoFEHiEHJcFcGhQJoKJQDVGkEUCODtDVPcYeUmD0ghQ0WdAAISiYFxFwEWgY5kibbb7QMF8yz4tIRRyk8bSgIwPSBqQrCKCX94iVCa1ZnESkJCSVIxIVb5FEECWHwx0yTT0WIGBoZhZi958yYgxn2l37aWgCmnCZPIkw14EAWXlTeHWWRF2WGRqwMyHLXhOWD5vSuVpA+m8VfE4E4rZSty0yGJf4ellaiThUjD8bWhRVCm35cHUIDb+WmGpoKpiQJXrZ2H5U2xRVRCZUxUQ4tG2YDanFPLDi7AkiuD0wmAawMrOTMrlWhCAakJKX2UWkEDczmTtVymWbdXYCIIZbzGLEHKaytDoLAbaS+alT8UDUAowq25fRO7RbCS57rUjDZmLXhwDV6n8wDUNGskb4VVbr9WvDtFHUhSYinUSbnUInuC2bXUrA1U0p4h7JNUtUsQ7W+6Fiz6cSJi6qGlJAuDiCrXfLZBpZ4yoWuBQ3hCFRtlbVRDLUzkA3I1cjnAg1NXmxNjaAQ1Q257ZAAA8RNiNYgpVPSBNfYAkAcvGewcYJAhgQUGZX616x5NUcwokoAAA1JhWEqhDdK4HIIiKTQLWJEHFLRaiLRKC4OLTTWsnTf8HhcJEzZ4AQEYEIHYOGW+IwFzSCFQDzWJLLWcvLWLQQBLV8mslLfxnzYLXLfnArUrdjZ9b5LsAcEcHqZKoaqJV0MnBkNUHsAlGDUmWduotDUDYDaseWPwRsaTRavKMHV7WHeQPVQrb9T5SzPchanMIaqlnjJZknWcr0JZtjfnaAP0q+aTWkIBu7XIg-GQn2t8EXe4JWriAfFdNNQyoRn8OrdHUHKQJcAjKAEdqupwuhvAlsIgu9VDHjB0fPW1VkE3URkrlHfPcdQ9TdYmezFvfdfPc2n8AovInKd8CHQKCvR7R+VxL7dQv7YDQHRzK2hfWndfTPcTK2jXVjbTZ-evQcYUtHSjWXdyJfenYBDQA1UyL3SxHnWcgXbbe3SXbbSA2Er0MehXT0utarRaNXVHa0ag1yA3bTZPWhi3atG3XDR3aDd3dnTNUkVRlsIPY-cHKPTaOPa8DHHYFyrYWvRRv-WWahMwFw4vX1StZ6rwhvcDDvSsNvUfXvUTAfWZCdTdWQ83YomyW-aHdfcUoBfPMBW5pwD4DwPwCgNBfRBtFtNQPdEjBTFlZpTca9KJFY3dAVe+aEK4zY4mJtCCLUUksjP5WrtrMUogl47RVJQY+gqmjGDxqevxp0KekTAuRWMPv+gkwUP+sk4KjxltRk6AFtdk7E8Pqkvk6kkU0ucPlNu4vxtU4UryCk10DxrIPQE+voPxi020w0zk8PurRk+reWI050Dxu1OIHqOcPQJCqM2IOM4wH8EMwUDxvzfk50ARWkPoLDelIpILYYKAAs87qJEpCswUGs6ABs0CopKpLs-szxkpDSRk4pF0GlJ0KpI8zc8PhCmkNMKc+c884pMCmcwUO83FcAMc6tIRWc5s6AIpGANcz03FQAKRgs-NQuKQIuAt7PwvviiRw0rMosXPt0bNYsu6sVpZ4sQu-NbOgCkt4xEvFNxVk3IsUuougAU0FB0uVMMvJTHP4t-Ost4yQvEuiSpRMvrMsvpTsvAvYupTctfNdC8tUsyuStCusVgvQtTDPMFDsUFCIUxieRhM3TWMRMky54pQwj-KnppDhO2POb6udIFOGtuORMZL4YARfrJTmsdRBBAq5OOveP8bBMUxHTurWt7S2sLUGu3TeO4G05zKpo8a+puz8aJs1T7OLnDPD6QAkCuyiDtNfNZs5uHxpvpsHPTOVCwCQAZNlsVvFvpsjPKAzMACi+TZbjbtbi5PGAAcooJ22C92527g7cna+WQ61GxE5bu-Kg2a10P8mQECsllyKGzG7OMO8I0uxO2XL0p6wlHO882XsG6O0a-dBO7CgdedAiNdGOza4GoHHrS4Kkk7tNP1M+M7EwJdFnVGooGYGojdAsazELEu746hW+AExTIo50EFA+3eo0SFZUbFMcLA9eE7jTI4vQ61Q4m6Uuya6g+B+m+u27iDkQ7hy4hhx8lh0ga65QNciW+WPh+We7iFO24up3ZNT3d5Qw7ekouNZ3fe12qiIh8kOguuj7QJ++J5Ge0QEvOqBtCzISE0CAqLS4GkJR9FTCPmqgZbS4Gmm6-3RdaThJXpWqtp5QIO-TaJGTQZ9IEpJNCKyrM2ORzeyp6Z6AL0OZ6G9Z2qrZ0LPZ+esJE5yrK5wANqO3uAacu2uBRCWZOfZCC0O3TqC26iaevnRf20AC6okdn1d4Xit1txnnHmjnQnTVULuKkpXZX5XFXlXRzijcnB8k4in9tAAOkflLYl9l3lzF2JM1xthJ1J7flurVwsfVwrZta5n+4NwpyN6E-axKHEFohN+gqJAADJKRYLzAkBzcUC83aSIKaIUCbfXTyeLcrdrc3DbcWPSA3S7Tqjv3h0FCIKzeFzoKSe5hFBbqPflQTerqYaLCHEffDpbBFcSwlcqT4waDuB1BbSSjwalcO2HpobezcKNhA+IiHNVfo8Y8yUuIfeHcHxNcteC0ff4-w-TAGs0AuDczoJcxLxrQbeFzqP2EjvHJCfqIBL4EH5ERFhycU-LAM8TJLBLLSBxs34LIC+XLLLHJ8-2vc-cxNXsrfWoeicrL7jYPQZi-0qzKKqNi7eFybfjrGSTq4oy-LBWssA8+sD41r0vfSei2dq6-zdjdHh7ebcM9nSXe0U3c6PG8W+SOey+lP68DcXbyKR4xo0QupoAGrpnR4jz4EAYBB81IRx-5GC6cFBGBr3R-0Zyl-4h8FO+enMR9466RAA","body":"function f1(x) {\n    x = pair(x, list(2));\n    return x;\n}\n\nfunction f2(x) {\n    function f(e) {\n        e;\n        return x;\n    }\n    return f(x = pair(x, list(2)));\n} "},{"body":"\n\tWhat are the values of\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f1(1)"},{"body":"\n\tand\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f2(1)"},{"body":"\n\twith the original\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"?\n\t  \n\tWhat would the values be with Cy's proposed change to\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"?\n\t  ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tCy also points out that changing\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"eval_sequence"},{"body":"\n\tas he proposes does not affect the behavior of the example in part a.\n\tExplain why this is true.\n      ","tag":"#text"}]},{"tag":"LI","child":[{"body":"\n\tHow do you think sequences\n\tought to be treated in the lazy evaluator?\n\tDo you like Cy's approach, the approach in the text, or some other\n\tapproach?\n      ","tag":"#text"}]}]}]},{"tag":"EXERCISE","title":"Exercise 4.29","id":"#ex-4.29","child":[{"body":"\n    The approach taken in this section is somewhat unpleasant, because it\n    makes an incompatible change to\n    JavaScript.\n    It might be nicer to implement lazy evaluation as an\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"upward-compatible extension","tag":"#text"}]},{"body":", that is, so that ordinary\n    JavaScript\n    programs will work as before.  We can do this by \n    introducing optional parameter declaration as a new\n      syntactic form inside function\n    declarations to let the user control whether or not arguments are to be\n    delayed.  While we're at it, we may as well also give the user the\n    choice between delaying with and without memoization.  For example, the\n    \n\tdeclaration\n      ","tag":"#text"},{"tag":"SNIPPET","latex":true,"eval":false,"body":"\nfunction f(a, b, c, d) {\t\n    parameters(\"strict\", \"lazy\", \"strict\", \"lazy_memo\");\n    $\\ldots$\n}\n      "},{"body":"\n    would define ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"f"},{"body":" to be a\n    function\n    of four arguments, where the first and third arguments are evaluated when the\n    function\n    is called, the second argument is delayed, and the fourth argument is both\n    delayed and memoized.\n    \n\tYou can assume that the parameter declaration is always\n\tthe first statement in the body of a function declaration,\n\tand if it is omitted, all parameters are strict.\n\tThus, ordinary function declaration\n\twill produce the same behavior as ordinary JavaScript,\n\twhile adding the\n\t","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"\"lazy_memo\""},{"body":"\n\tdeclaration to each parameter of every compound\tfunction\n\twill produce the behavior of the lazy evaluator defined in this section.\n\tDesign and implement the changes required to produce such an extension to\n\tJavaScript. The ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"parse"},{"body":" function will\n\ttreat parameter declarations as\tfunction applications, so you need to\n\tmodify ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" to dispatch to your\n\timplementation of the new syntactic form.\n      \n    You must also arrange for\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"evaluate"},{"body":"\n    or ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"apply"},{"body":" to determine when arguments are to be\n    delayed, and to force or delay arguments accordingly, and you must arrange\n    for forcing to memoize or not, as appropriate.\n    ","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-1","count":1,"href":"/sicpjs/4.2.2#footnote-link-1","child":[{"body":"The word ","tag":"#text"},{"tag":"EM","child":[{"body":"thunk","tag":"#text"}]},{"body":" was invented by an informal\n      \n      working group that was discussing the implementation of call-by-name\n      \n      in Algol 60.  They observed that most of the analysis of (\"thinking\n      about\") the expression could be done at compile time; thus, at run\n      time, the expression would already have been \"thunk\" about \n      \n      (Ingerman et al. 1960).","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-2","count":2,"href":"/sicpjs/4.2.2#footnote-link-2","child":[{"body":"This is analogous to the\n    \n\tforcing of \n      \n    the delayed objects that were introduced in chapter 3 to\n    represent streams.  The critical difference between what we are\n    doing here and what we did in chapter 3 is that we are building\n    delaying and forcing into the evaluator, and thus making this uniform\n    and automatic throughout the language.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-3","count":3,"href":"/sicpjs/4.2.2#footnote-link-3","child":[{"body":"Lazy evaluation combined with memoization is sometimes\n    referred to as\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-need","tag":"#text"}]},{"body":" argument passing, in contrast to\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"call-by-name","tag":"#text"}]},{"body":" argument passing.  \n    \n    (Call-by-name, introduced in\n    \n    Algol 60, is similar to non-memoized lazy\n    evaluation.) As language designers, we can build our evaluator to memoize,\n    not to memoize, or leave this an option for programmers\n    (exercise ","tag":"#text"},{"tag":"REF","body":"4.29","href":"/sicpjs/4.2.2#ex-4.29"},{"body":").  As you might\n    expect from chapter 3, these choices raise issues that become both\n    subtle and confusing in the presence of assignments.  (See\n    exercises ","tag":"#text"},{"tag":"REF","body":"4.25","href":"/sicpjs/4.2.2#ex-4.25"},{"body":"\n    and ","tag":"#text"},{"tag":"REF","body":"4.27","href":"/sicpjs/4.2.2#ex-4.27"},{"body":".)\n    An excellent article by\n    \n    Clinger (1982) attempts to clarify the\n    multiple dimensions of confusion that arise here.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-4","count":4,"href":"/sicpjs/4.2.2#footnote-link-4","child":[{"body":"Notice that we also erase the\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":" from the thunk once the expression's\n    value has been computed.  This makes no difference in the values returned by\n    the interpreter.  It does help save space, however, because removing the\n    reference from the thunk to the ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"env"},{"body":" once it is\n    no longer needed allows this structure to be\n    ","tag":"#text"},{"tag":"EM","child":[{"body":"garbage-collected","tag":"#text"}]},{"body":" and its space \n        recycled, as we will discuss in\n\t      section ","tag":"#text"},{"tag":"REF","body":"5.3","href":"/sicpjs/5.3"},{"body":".\n    Similarly, we could have allowed unneeded environments in the memoized\n    delayed objects of section ","tag":"#text"},{"tag":"REF","body":"3.5.1","href":"/sicpjs/3.5.1"},{"body":"\n    to be garbage-collected, by having\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"memo"},{"body":"\n    do something like\n    ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun = null;"},{"body":"\n    to discard the\n    function\n      ","tag":"#text"},{"tag":"JAVASCRIPTINLINE","body":"fun"},{"body":"\n    (which includes the environment in which the\n    \n\tlambda expression\n\tthat makes up the tail of the stream\n      \n    was evaluated) after storing its\n    value.","tag":"#text"}]},{"tag":"DISPLAYFOOTNOTE","id":"#footnote-5","count":5,"href":"/sicpjs/4.2.2#footnote-link-5","child":[{"body":"This exercise demonstrates that the interaction between\n  lazy evaluation and side effects can be very confusing.  This is just what you\n  might expect from the discussion in chapter 3.","tag":"#text"}]}]